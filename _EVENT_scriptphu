
-- xem ƒëi·ªÉm trial v√† l∆∞·ª£t ch∆°i
task.spawn(function()
wait(60)
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local Save = require(game.ReplicatedStorage.Library.Client.Save)

-- X√≥a GUI c≈© n·∫øu ƒë√£ t·ªìn t·∫°i
local playerGui = player:WaitForChild("PlayerGui")
local oldGui = playerGui:FindFirstChild("TimeTrialGui")
if oldGui then oldGui:Destroy() end

local function getRunsLeft()
	local saveData = Save.Get()
	if saveData and saveData.TimeTrialStats then
		local usedRuns = saveData.TimeTrialStats.DailyRuns or 0
		return math.max(0, 10 - usedRuns)
	end
	return 0
end
local function getTimeTrialPoints()
	local saveData = Save.Get()
	if saveData and saveData.TimeTrialStats and type(saveData.TimeTrialStats.Points) == "number" then
		return saveData.TimeTrialStats.Points
	end
	return 0
end

-- T·∫°o GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "TimeTrialGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = playerGui

local function createLabel(name, position, anchor, bgColor)
	local label = Instance.new("TextLabel")
	label.Name = name
	label.AnchorPoint = anchor or Vector2.new(0, 0)
	label.Position = position
	label.Size = UDim2.new(0, 0, 0, 38)
	label.BackgroundColor3 = bgColor
	label.TextColor3 = Color3.fromRGB(255, 255, 255)
	label.Font = Enum.Font.GothamBold
	label.TextSize = 32
	label.Text = "..."
	label.BackgroundTransparency = 0
	label.BorderSizePixel = 0
	label.TextXAlignment = Enum.TextXAlignment.Center
	label.Parent = screenGui
	return label
end

-- üß≠ T·∫°o label: Points (tr√°i tr√™n), TimeTrial (gi·ªØa tr√™n)
local pointsLabel = createLabel("PointsLabel", UDim2.new(0.65, 0, 0.1, -55), Vector2.new(0, 0), Color3.fromRGB(0, 128, 255))
local timeTrialLabel = createLabel("TimeTrialLabel", UDim2.new(0.79, 0, 0.1, -55), Vector2.new(0, 0), Color3.fromRGB(128, 0, 128))

-- C·∫≠p nh·∫≠t k√≠ch th∆∞·ªõc theo text
local function updateLabelSize(label)
	label.Size = UDim2.new(0, label.TextBounds.X + 20, 0, 38)
end

-- C·∫≠p nh·∫≠t GUI m·ªói 10 gi√¢y
task.spawn(function()
	while true do
		local runsLeft = getRunsLeft()
		local points = getTimeTrialPoints()

		pointsLabel.Text = tostring(points)
		updateLabelSize(pointsLabel)

		timeTrialLabel.Text = tostring(runsLeft)
		updateLabelSize(timeTrialLabel)

		task.wait(10)
	end
end)

end)

-- xem sl 7 s√°ch th∆∞·ªùng d√πng
task.spawn(function()
task.wait(60)
local booksToCheck = {
    "Diamonds","Lucky Eggs","Treasure Hunter"
}

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local SaveData = require(ReplicatedStorage.Library.Client.Save).Get()

-- ƒê·∫øm s·ªë s√°ch TN = 10 theo t√™n
local function findBookAmount(bookName)
    local results = 0
    local subTable = SaveData.Inventory.Enchant
    if type(subTable) ~= "table" then return 0 end

    for _, v in pairs(subTable) do
        if typeof(v) == "table" and v.id == bookName and v.tn == 10 then
            results += tonumber(v._am) or 1
        end
    end

    return results
end

-- T·∫°o UI 1 h√†ng ngang v·ªõi k√≠ch th∆∞·ªõc vu√¥ng
local function createCounterUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "BookCounterUI"
    screenGui.ResetOnSpawn = false
    screenGui.IgnoreGuiInset = true
    screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

    local container = Instance.new("Frame", screenGui)
    container.Name = "Container"
    container.AnchorPoint = Vector2.new(0.5, 0)
    container.Position = UDim2.new(0.5, 0, 0.2, 0) -- Tr√™n ƒë·∫ßu, d∆∞·ªõi t√™n ng∆∞·ªùi ch∆°i
    container.Size = UDim2.new(0, 75 * #booksToCheck, 0, 75)
    container.BackgroundTransparency = 1

    for i = 1, #booksToCheck do
        local box = Instance.new("TextLabel", container)
        box.Name = "Box_" .. i
        box.Size = UDim2.new(0, 70, 0, 70)
        box.Position = UDim2.new(0, (i - 1) * 75, 0, 0)
        box.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        box.TextColor3 = Color3.new(1, 1, 1)
        box.TextStrokeTransparency = 0.1
        box.BorderSizePixel = 0
        box.TextScaled = true
        box.Font = Enum.Font.GothamBlack
        box.Text = "?"
        box.BackgroundTransparency = 0
        box.TextWrapped = true
        box.ClipsDescendants = true
    end
end

-- C·∫≠p nh·∫≠t s·ªë m·ªói 5s
local function updateCounterUI()
    local container = LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("BookCounterUI"):WaitForChild("Container")
    for i, bookName in ipairs(booksToCheck) do
        local count = findBookAmount(bookName)
        local label = container:FindFirstChild("Box_" .. i)
        if label then
            label.Text = tostring(count)
        end
    end
end

-- Kh·ªüi ƒë·ªông UI v√† c·∫≠p nh·∫≠t
createCounterUI()
task.spawn(function()
    while true do
        updateCounterUI()
        task.wait(5)
    end
end)


end)
---------------------------------------------------------------------------------------------------------------------

-- Xem item c·∫ßn t√¨m x 10 ·ªü gi·ªØa cho gi·∫£ l·∫≠p
task.spawn(function()
	task.wait(1)

	local Players = game:GetService("Players")
	local ReplicatedStorage = game:GetService("ReplicatedStorage")

	local LocalPlayer = Players.LocalPlayer
	local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
	local Client = ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client")
	local SaveModule = require(Client:WaitForChild("Save"))

	local previousCounts = {}

	-- c·∫•u h√¨nh item c·∫ßn theo d√µi
	local itemsToTrack = {		
		{ id = "Ancestor Eagle", guiName = "Item1", row = 0, col = 0, color = Color3.fromRGB(255, 165, 0) },	-- cam
		{ id = "MVP Key Upper Half", guiName = "Item2", row = 0, col = 1, color = Color3.fromRGB(255, 255, 255) },		-- trang
	}

	local function createItemFrame(itemConfig, itemCount)
		local frameSize = 100
		local spacing = 10
		local cols = 2
		local rows = 2

		-- t√≠nh v·ªã tr√≠ ch√≠nh gi·ªØa m√†n h√¨nh
		local offsetX = (itemConfig.col * (frameSize + spacing)) - ((cols - 1) * (frameSize + spacing) / 2)
		local offsetY = (itemConfig.row * (frameSize + spacing)) - ((rows - 1) * (frameSize + spacing) / 2) + 80


		local screenGui = Instance.new("ScreenGui")
		screenGui.Name = itemConfig.guiName
		screenGui.Parent = PlayerGui
		screenGui.ResetOnSpawn = false
		screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

		local frame = Instance.new("Frame")
		frame.Name = "ItemFrame"
		frame.Size = UDim2.new(0, frameSize, 0, frameSize)
		frame.Position = UDim2.new(0.75, offsetX, 1, -offsetY)
		frame.AnchorPoint = Vector2.new(0.5, 1)
		frame.BackgroundColor3 = itemConfig.color
		frame.BorderSizePixel = 2
		frame.Parent = screenGui

		local label = Instance.new("TextLabel")
		label.Size = UDim2.new(1, 0, 1, 0)
		label.BackgroundTransparency = 1
		label.Text = tostring(itemCount)
		label.TextColor3 = Color3.fromRGB(0, 0, 0)
		label.TextScaled = true
		label.Font = Enum.Font.GothamBold
		label.Parent = frame
	end

	local function checkInventory()
		local inventory = SaveModule.Get().Inventory or {}
		local currentCounts = {}

		-- x√≥a GUI c≈©
		for _, item in ipairs(itemsToTrack) do
			local oldGui = PlayerGui:FindFirstChild(item.guiName)
			if oldGui then oldGui:Destroy() end
		end

		for _, item in ipairs(itemsToTrack) do
			local count = 0
			for _, group in pairs(inventory) do
				for _, obj in pairs(group) do
					if obj.id == item.id then
						count += (obj._am or 1)
					end
				end
			end
			currentCounts[item.id] = count
			createItemFrame(item, count)
		end

		previousCounts = currentCounts
	end

	checkInventory()
	while true do
		task.wait(10)
		checkInventory()
	end
end)

-- Gh√©p s√°ch + thu·ªëc n·∫øu lv < 99 
task.spawn(function()
	task.wait(150)
local Save = require(game:GetService("ReplicatedStorage").Library.Client.Save)
local level = Save.Get().Mastery and Save.Get().Mastery.Potions

if level and level < 13034430 then

    -- H√†m n√¢ng c·∫•p thu·ªëc
    local function _update_sach_theo_level(name_sach, level_sach)
        local saveModule = require(game.ReplicatedStorage.Library.Client.Save)
        local inventory = saveModule.Get() and saveModule.Get().Inventory and saveModule.Get().Inventory.Potion
        if not inventory then return end

        local count = 0
        local uid_sach = nil

        for itemUID, itemData in pairs(inventory) do
            if itemData.id == name_sach and itemData.tn == level_sach then
                count += (itemData._am or 1)
                uid_sach = tostring(itemUID)
            end
        end

        local totalUpgradeAmount = count // 3
        if uid_sach and totalUpgradeAmount > 0 then
            game:GetService("ReplicatedStorage").Network.UpgradePotionsMachine_Activate:InvokeServer(uid_sach, totalUpgradeAmount)
            warn("Upgrade: " .. name_sach .. " UID : " .. uid_sach .. " x" .. totalUpgradeAmount .. "\n")
        end
    end

    -- Danh s√°ch s√°ch c·∫ßn n√¢ng c·∫•p
    local list = {
        "Treasure Hunter", "Walkspeed", "Strong Pets", 
        "Lucky Eggs", "Diamonds", "Coins"
    }

    for _, name in ipairs(list) do
        _update_sach_theo_level(name, 1)
		task.wait(2)
        _update_sach_theo_level(name, 2)
		task.wait(2)
    end
	
end


-----------------------
local Save = require(game:GetService("ReplicatedStorage").Library.Client.Save)
local level = Save.Get().Mastery and Save.Get().Mastery.Enchants

if level and level < 13034430 then

    -- H√†m n√¢ng c·∫•p s√°ch
    local function _update_sach_theo_level(name_sach, level_sach)
        local saveModule = require(game.ReplicatedStorage.Library.Client.Save)
        local inventory = saveModule.Get() and saveModule.Get().Inventory and saveModule.Get().Inventory.Enchant
        if not inventory then return end

        local count = 0
        local uid_sach = nil

        for itemUID, itemData in pairs(inventory) do
            if itemData.id == name_sach and itemData.tn == level_sach then
                count += (itemData._am or 1)
                uid_sach = tostring(itemUID)
            end
        end

        local totalUpgradeAmount = count // 5
        if uid_sach and totalUpgradeAmount > 0 then
            game:GetService("ReplicatedStorage").Network.UpgradeEnchantsMachine_Activate:InvokeServer(uid_sach, totalUpgradeAmount)
            warn("Upgrade: " .. name_sach .. " lv" .. level_sach .. " x" .. totalUpgradeAmount .. "\n")
        end
    end

    -- Danh s√°ch s√°ch c·∫ßn n√¢ng c·∫•p
    local list = {
        "Treasure Hunter", "Tap Power", "Strong Pets", "Walkspeed",
        "Magnet", "Lucky Eggs", "Diamonds", "Criticals", "Coins"
    }

    for _, name in ipairs(list) do
        _update_sach_theo_level(name, 1)
		task.wait(2)
        _update_sach_theo_level(name, 2)
		task.wait(2)
    end
	
end

end)

--xem t√™n nh√¢n v·∫≠t v√† ki·ªÉm tra gem < 10m cho gi·∫£ l·∫≠p
task.spawn(function()
	task.wait(125)
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local PlayerGui = player:WaitForChild("PlayerGui")

-- L·∫•y diamonds t·ª´ leaderstats
local diamondsStat = player:WaitForChild("leaderstats"):FindFirstChild("üíé Diamonds") or player.leaderstats:WaitForChild("Diamonds")

local GUI_NAME = "GemStatusUI"

local COLOR_RED = Color3.new(1, 0, 0)
local COLOR_BLUE = Color3.fromRGB(173, 216, 230) -- xanh bi·ªÉn nh·∫°t

-- T·∫°o ho·∫∑c c·∫≠p nh·∫≠t giao di·ªán
local function updateUI(diamonds)
	local gui = PlayerGui:FindFirstChild(GUI_NAME)

	-- N·∫øu ch∆∞a c√≥ GUI, t·∫°o m·ªõi
	if not gui then
		gui = Instance.new("ScreenGui")
		gui.Name = GUI_NAME
		gui.IgnoreGuiInset = true
		gui.ResetOnSpawn = false
		gui.ZIndexBehavior = Enum.ZIndexBehavior.Global
		gui.Parent = PlayerGui

		local stripe = Instance.new("Frame")
		stripe.Name = "Stripe"
		stripe.Size = UDim2.new(1, 0, 0, 50) -- chi·ªÅu cao thu nh·ªè
		stripe.Position = UDim2.new(0, 0, 0, 0)
		stripe.BackgroundTransparency = 0.2
		stripe.BorderSizePixel = 0
		stripe.ZIndex = 9999
		stripe.Parent = gui

		local nameLabel = Instance.new("TextLabel")
		nameLabel.Name = "NameLabel"
		nameLabel.Size = UDim2.new(0.9, 0, 0.8, 0) -- gi·ªëng style ItemFrame
		nameLabel.Position = UDim2.new(0.05, 0, 0.1, 0)
		nameLabel.BackgroundTransparency = 1
		nameLabel.Font = Enum.Font.GothamBold
		nameLabel.TextColor3 = Color3.fromRGB(0, 0, 0)
		nameLabel.TextScaled = true
		nameLabel.Text = "" -- c·∫≠p nh·∫≠t ·ªü d∆∞·ªõi
		nameLabel.ZIndex = 10000
		nameLabel.Parent = stripe
	end

	-- C·∫≠p nh·∫≠t n·ªôi dung v√† m√†u
	local stripe = gui:FindFirstChild("Stripe")
	local label = stripe and stripe:FindFirstChild("NameLabel")

	if stripe and label then
		if diamonds < 10_000_000 then
			stripe.BackgroundColor3 = COLOR_RED
			label.Text = player.Name
		else
			stripe.BackgroundColor3 = COLOR_BLUE
			label.Text = player.Name
		end
	end
end

-- Theo d√µi m·ªói 10 gi√¢y
local function monitor()
	while true do
		task.wait(10)
		local diamonds = diamondsStat.Value
		updateUI(diamonds)
	end
end

-- B·∫Øt ƒë·∫ßu
task.spawn(monitor)


end)
---------------------------------------------------------------------------------------------------------------------

-- xo√° l∆∞u pet r·ªìi ch·ªçn pet m·∫°nh nh·∫•t	
task.spawn(function()
	task.wait(150)

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local PetsFolder = workspace:WaitForChild("__THINGS"):WaitForChild("Pets")
local Network = ReplicatedStorage:WaitForChild("Network")

 
 Network.Pets_ToggleFavoriteMode:FireServer()
    task.wait(1)

    Network.Pets_SetTeamIndex:FireServer(2)
    task.wait(2)

    Network.Pets_SetTeamIndex:FireServer(1)
    task.wait(2)

    Network.Pets_ToggleFavoriteMode:FireServer()
    task.wait(1)
end)


-- th√™m b·∫°n b√®
task.spawn(function()
	task.wait(300)

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

for _, player in pairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        pcall(function()
            LocalPlayer:RequestFriendship(player)
			task.wait(300)
        end)
    end
end

end)
---------------------------------------------------------------------------------------------------------------------


-- ph√°t hi·ªán kh√¥ng farm ·ªü svv tho√°t game
task.spawn(function()
task.wait(50)
-- H√†m ki·ªÉm tra s·ªë ng∆∞·ªùi v√† shutdown n·∫øu c·∫ßn
local function autoShutdownIfNotAlone()
    local playerCount = #Players:GetPlayers()

    if playerCount > 1 then
        game:Shutdown() -- ‚ö†Ô∏è L·ªánh shutdown client
		Players.LocalPlayer:Kick("kick")
    end
end

-- G·ªçi ngay khi script ch·∫°y
autoShutdownIfNotAlone()


end)
---------------------------------------------------------------------------------------------------------------------

 --1 gi·ªù check daily run time trial n·∫øu ƒë√£ ch·∫°y 0 l·∫ßn th√¨ tho√°t game ƒë·ªÉ t·ª± ch·∫°y farm ngoai
task.spawn(function()
wait(100)
while true do
Save = require(game.ReplicatedStorage.Library.Client.Save)		
local function getRunsUsed()
	local saveData = Save.Get()
	return saveData and saveData.TimeTrialStats and saveData.TimeTrialStats.DailyRuns or 0
end

local Daily_run = getRunsUsed()
if Daily_run == 0 then
		game:Shutdown() -- ‚ö†Ô∏è L·ªánh shutdown client
		Players.LocalPlayer:Kick("kick")
end

	wait(3600)
end

end)


task.spawn(function() 

wait(999)



getgenv().Settings = {
    ["list_pet"] = {

["Huge Scribe Squirrel"] 	= {Soluong_Yeu_cau = 0},
["Golden Huge Scribe Squirrel"] 	= {Soluong_Yeu_cau = 0},

["Huge Gym Panda"] 	= {Soluong_Yeu_cau = 0},
["Golden Huge Gym Panda"] 	= {Soluong_Yeu_cau = 0},

["Huge Tennis Squirrel"] 	= {Soluong_Yeu_cau = 0},
["Golden Huge Tennis Squirrel"] 	= {Soluong_Yeu_cau = 0},

["Wise Cat"] 	= {Soluong_Yeu_cau = 0},
["Golden Wise Cat"] 	= {Soluong_Yeu_cau = 0},
["Shiny Golden Wise Cat"] 	= {Soluong_Yeu_cau = 0},
["Shiny Rainbow Wise Cat"] 	= {Soluong_Yeu_cau = 0},

["Quartz Fox"] 	= {Soluong_Yeu_cau = 0},
["Golden Quartz Fox"] 	= {Soluong_Yeu_cau = 0},
["Rainbow Quartz Fox"] 	= {Soluong_Yeu_cau = 10},
["Shiny Quartz Fox"] 	= {Soluong_Yeu_cau = 0},
["Shiny Golden Quartz Fox"] 	= {Soluong_Yeu_cau = 0},
["Shiny Rainbow Quartz Fox"] 	= {Soluong_Yeu_cau = 0},
},
   
}

ds_nguoi_nhan_pet = {"sijmongirthss", "Ash3rP0w3rPanda2018", "soystaylan5", "dreddyewele60", "1971Nowak3135", "mcconchifredjeyo", "ecclweltst", "killedsanthi85", "tamuleviazulayv", "hegemangaltieri81"}




-- H√†m ki·ªÉm tra t√™n c√≥ ch·ª©a t·ª´ kh√≥a
function Kiem_tra_ten_co_them_tu_la_(itemName)
    local SH_find = false
    local PT_find = false
    local TN_find = false    
    local category_find = false
	
    -- Ki·ªÉm tra n·∫øu itemName c√≥ t·ª´ "Shiny"
    if string.find(itemName, "Shiny") then
        SH_find = true
        itemName = string.gsub(itemName, "Shiny ", "") -- Lo·∫°i b·ªè t·ª´ "Shiny"
        warn("SH_find true")
    end

    -- Ki·ªÉm tra n·∫øu itemName c√≥ t·ª´ "Golden"
    if string.find(itemName, "Golden") then
        PT_find = 1
        itemName = string.gsub(itemName, "Golden ", "") -- Lo·∫°i b·ªè t·ª´ "Golden"
        warn("PT_find 1")
    end

    -- Ki·ªÉm tra n·∫øu itemName c√≥ t·ª´ "Rainbow"
    if string.find(itemName, "Rainbow") then
        PT_find = 2
        itemName = string.gsub(itemName, "Rainbow ", "") -- Lo·∫°i b·ªè t·ª´ "Rainbow"
        warn("PT_find 2")
    end

    -- Ki·ªÉm tra n·∫øu itemName c√≥ t·ª´ "Shiny Golden"
    if string.find(itemName, "Shiny Golden") then
        SH_find = true
        PT_find = 1
        itemName = string.gsub(itemName, "Shiny Golden ", "") -- Lo·∫°i b·ªè t·ª´ "Shiny Golden"
        warn("PT_find 1 SH_find true")
    end

    -- Ki·ªÉm tra n·∫øu itemName c√≥ t·ª´ "Shiny Rainbow"
    if string.find(itemName, "Shiny Rainbow") then
        SH_find = true
        PT_find = 2
        itemName = string.gsub(itemName, "Shiny Rainbow ", "") -- Lo·∫°i b·ªè t·ª´ "Shiny Rainbow"
        warn("PT_find 2 SH_find true")
    end

    -- Ki·ªÉm tra n·∫øu itemName c√≥ t·ª´ "TNx"
    local tnMatch = itemName:match("TN(%d)")  -- T√¨m ki·∫øm "TN" k√®m m·ªôt s·ªë
    if tnMatch then
        TN_find = tonumber(tnMatch)  -- G√°n gi√° tr·ªã c·ªßa TN_find
        itemName = string.gsub(itemName, " TN%d", "")  -- Lo·∫°i b·ªè ph·∫ßn "TNx" kh·ªèi itemName
    end

    -- Ki·ªÉm tra category
    if string.find(itemName, "Potion") then
        category_find = "Potion"
        itemName = string.gsub(itemName, "Potion ", "") -- Lo·∫°i b·ªè t·ª´ "Potion"
        warn("category Potion")
    end
    if string.find(itemName, "Enchant") then
        category_find = "Enchant"
        itemName = string.gsub(itemName, "Enchant ", "") -- Lo·∫°i b·ªè t·ª´ "Enchant"
        warn("category Enchant")
    end
	if string.find(itemName, "XPPotion") then
        category_find = "XPPotion"
        itemName = string.gsub(itemName, "XPPotion ", "") -- Lo·∫°i b·ªè t·ª´ "XPPotion"
        warn("category XPPotion")
    end

    -- Tr·∫£ v·ªÅ t·∫•t c·∫£ c√°c gi√° tr·ªã
    return itemName, SH_find, PT_find
end

-- H√†m t√¨m trong t·ª´ng b·∫£ng con c·ªßa Inventory
local function findInInventorySubTable(subTable, itemName, PT_find, SH_find)
    if type(subTable) ~= "table" then return end

    -- S·ª≠ d·ª•ng string.match ƒë·ªÉ t√¨m ch√≠nh x√°c itemName
    for uid, v in pairs(subTable) do
        if type(v) == "table" and v.id then
            -- Ki·ªÉm tra xem id c√≥ kh·ªõp ch√≠nh x√°c v·ªõi itemName v√† PT_find, SH_find, TN_find
            if string.match(v.id, "^" .. itemName .. "$") then  -- D√πng string.match ƒë·ªÉ t√¨m ph·∫ßn chu·ªói ch√≠nh x√°c
                local ok = true

                -- Ki·ªÉm tra ƒëi·ªÅu ki·ªán PT_find n·∫øu c√≥
                if PT_find ~= false and v.pt ~= PT_find then
                    ok = false
                end
                if PT_find == false and v.pt == 1 then
                    ok = false
                end
                if PT_find == false and v.pt == 2 then
                    ok = false
                end
                -- Ki·ªÉm tra ƒëi·ªÅu ki·ªán SH_find n·∫øu c√≥
                if SH_find == true and v.sh == nil then
                    ok = false 
                end
                if SH_find == false and v.sh == true then
                    -- N·∫øu SH_find l√† nil th√¨ ch·ªâ ch·∫•p nh·∫≠n v.sh l√† nil
                    ok = false
                end

                -- N·∫øu t·∫•t c·∫£ ƒëi·ªÅu ki·ªán ƒë·ªÅu th·ªèa m√£n, th√™m v√†o danh s√°ch
                if ok then
                    table.insert(itemsFound, {
                        UID = uid,
                        ID = v.id,
                        PT = v.pt,
                        SH = v.sh,
                        TN = v.tn,
                        Count = tonumber(v._am) or 1,
                        Category = categoryName  -- Th√™m category cho t·ª´ng m·ª•c
                    })
                end
            end
        end
    end
end

-- H√†m ki·ªÉm tra v√† g·ª≠i pet
local function sendExcessPets()

	local ReplicatedStorage = game:GetService("ReplicatedStorage")
	local Client = ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client")
	local Network = require(Client.Network)
	local SaveData = require(ReplicatedStorage.Library.Client.Save).Get()   

    -- L·∫∑p qua t·ª´ng pet trong list_pet
    for petName, petData in pairs(getgenv().Settings["list_pet"]) do
        local itemName = petName
        local requiredAmount = petData.Soluong_Yeu_cau
        local itemName,SH_find, PT_find = Kiem_tra_ten_co_them_tu_la_(itemName)
        
        -- Reset l·∫°i danh s√°ch pet
        itemsFound = {}

        -- T√¨m trong Inventory
        findInInventorySubTable(SaveData.Inventory.Pet, itemName, PT_find, SH_find)
        
        -- Ki·ªÉm tra s·ªë l∆∞·ª£ng pet c√≥ s·∫µn trong kho
        local totalCount = 0
        for _, item in pairs(itemsFound) do
            if item.ID == itemName then
                totalCount = totalCount + item.Count
            end
        end

        -- N·∫øu s·ªë l∆∞·ª£ng pet c√≥ trong kho nhi·ªÅu h∆°n y√™u c·∫ßu, g·ª≠i pet 
        if totalCount > requiredAmount then
            
            local randomRecipient = ds_nguoi_nhan_pet[math.random(1, #ds_nguoi_nhan_pet)]
            local message = string.format("Happy birthday %s! You received an excess pet: %s", randomRecipient, itemName)

            -- L·∫∑p qua v√† g·ª≠i pet
            local petSent = 0
            for _, item in pairs(itemsFound) do
				
                if item.ID == itemName and petSent < totalCount then
                    
                    -- G·ª≠i pet
					wait(3)
					if string.find(itemName,"Huge") then
						--warn("Huge chi send 1")
						totalCount = 1
					end
					if requiredAmount > 0 then
						--warn("Gi·ªØ l·∫°i bn con")
						totalCount = totalCount - requiredAmount
					end
                    local success, err = pcall(function()
                        return Network.Invoke("Mailbox: Send", randomRecipient, message, "Pet", item.UID, totalCount)
                    end)
                    if success then
                        warn("‚úÖ ƒê√£ g·ª≠i pet " .. itemName .. " cho " .. randomRecipient .. " v·ªõi s·ªë l∆∞·ª£ng " .. totalCount)
                    else
                        warn("‚ùå L·ªói khi g·ª≠i pet " .. itemName .. ": " .. err)
                    end
                    
                end
            end
        else
            warn("‚ö†Ô∏è Kh√¥ng c√≥ ƒë·ªß pet " .. itemName .. " trong kho ƒë·ªÉ g·ª≠i.")
        end
    end
end

-- G·ªçi h√†m g·ª≠i pet
while true do
sendExcessPets()
wait(3600)
end

end)
