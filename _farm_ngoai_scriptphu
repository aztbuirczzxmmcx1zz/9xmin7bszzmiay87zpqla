-- map 269 time trial
task.spawn(function()
wait(150)


_G.STOP_TIME_TRIAL = false

local lagFlag = false
local endFlag = false
local lagMonitorThread
local increaseMonitorThread

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

local Save = require(game.ReplicatedStorage.Library.Client.Save)
local ZoneCmds = require(game.ReplicatedStorage.Library.Client.ZoneCmds)

local function getRunsUsed()
	local saveData = Save.Get()
	return saveData and saveData.TimeTrialStats and (saveData.TimeTrialStats.DailyRuns or 0) or 0
end

local function getRunsLeft()
	return 10 - getRunsUsed()
end

local function getTimeTrialPoints()
	local saveData = Save.Get()
	return saveData and saveData.TimeTrialStats and (saveData.TimeTrialStats.Points or 0) or 0
end

local function getTotalRuns()
	local saveData = Save.Get()
	return saveData and saveData.TimeTrialStats and (saveData.TimeTrialStats.TotalRuns or 0) or 0
end

-- GUI
local screenGui = playerGui:FindFirstChild("TimeTrialGui")
if not screenGui then
	screenGui = Instance.new("ScreenGui")
	screenGui.Name = "TimeTrialGui"
	screenGui.ResetOnSpawn = false
	screenGui.Parent = playerGui
end

local function createLabel(name, position, anchor, bgColor)
	local label = Instance.new("TextLabel")
	label.Name = name
	label.AnchorPoint = anchor
	label.Position = position
	label.Size = UDim2.new(0, 0, 0, 38)
	label.BackgroundColor3 = bgColor
	label.TextColor3 = Color3.new(1, 1, 1)
	label.Font = Enum.Font.GothamBold
	label.TextSize = 32
	label.BackgroundTransparency = 0
	label.BorderSizePixel = 0
	label.TextXAlignment = Enum.TextXAlignment.Center
	label.Text = "..."
	label.Parent = screenGui
	return label
end

local function updateLabelSize(label)
	label.Size = UDim2.new(0, label.TextBounds.X + 20, 0, 38)
end

local pointsLabel = screenGui:FindFirstChild("PointsLabel") or createLabel("PointsLabel", UDim2.new(0.3, 0, 0.1, -55), Vector2.new(0, 0), Color3.fromRGB(0, 128, 255))
local timeTrialLabel = screenGui:FindFirstChild("TimeTrialLabel") or createLabel("TimeTrialLabel", UDim2.new(0.79, 0, 0.1, -55), Vector2.new(0, 0), Color3.fromRGB(128, 0, 128))

task.spawn(function()
	while true do
		pointsLabel.Text = tostring(getTimeTrialPoints())
		updateLabelSize(pointsLabel)
		timeTrialLabel.Text = tostring(getRunsLeft())
		updateLabelSize(timeTrialLabel)
		task.wait(10)
	end
end)

local function getMaxZoneFromMap4()
	local mapFolder = workspace:FindFirstChild("Map4")
	if not mapFolder then
		warn("‚ùå Kh√¥ng t√¨m th·∫•y Map4 trong workspace.")
		return 0
	end
	local maxZone = 0
	for _, folder in ipairs(mapFolder:GetChildren()) do
		if folder:IsA("Folder") then
			local zoneNumber = tonumber(folder.Name:match("^(%d+)"))
			if zoneNumber and zoneNumber > maxZone then
				maxZone = zoneNumber
			end
		end
	end
	return maxZone
end

local function waitUntilReachMaxZone()
	local maxMapZone = getMaxZoneFromMap4()
	while true do
		local success, data = pcall(function()
			local _, zoneData = ZoneCmds.GetMaxOwnedZone()
			return zoneData
		end)
		local current = success and data and data.ZoneNumber or 0
		if current >= maxMapZone then
			warn("‚úÖ ƒê√£ ƒë·∫°t Zone t·ªëi ƒëa (" .. tostring(current) .. ")")
			break
		end
		warn("‚è≥ Ch∆∞a ƒë·∫°t zone t·ªëi ƒëa (" .. tostring(current) .. "/" .. tostring(maxMapZone) .. "), ƒë·ª£i 60s...")
		task.wait(60)
	end
end

waitUntilReachMaxZone()
-- Theo d√µi 12 ph√∫t
local monitor12minThread
local function startMonitor12Min()
	monitor12minThread = task.spawn(function()
		while true do
			local startUsed = getRunsUsed()
			local startTotal = getTotalRuns()
			local t = 0
			while t < 720 do
				task.wait(10)
				t += 10
				if getRunsUsed() ~= startUsed or getTotalRuns() ~= startTotal then
					break
				end
			end
			if getRunsUsed() == startUsed and getTotalRuns() == startTotal then
				pcall(function()
					player:Kick("‚è∞ 12 ph√∫t kh√¥ng thay ƒë·ªïi l∆∞·ª£t ho·∫∑c t·ªïng Time Trial ‚Üí nghi ng·ªù treo m√°y.")
				end)
				return
			end
		end
	end)
end

startMonitor12Min()

local function teleportTo(part)
	local character = player.Character or player.CharacterAdded:Wait()
	if character and character:FindFirstChild("HumanoidRootPart") and part and part.CFrame then
		character.HumanoidRootPart.CFrame = part.CFrame + Vector3.new(0, 10, 0)
	end
end

local function safeTeleportOut()
	teleportTo(workspace.__THINGS.Instances.TimeTrial.Teleports.Leave)
	task.wait(9)
	if increaseMonitorThread then
		pcall(task.cancel, increaseMonitorThread)
		increaseMonitorThread = nil
	end
	if lagMonitorThread then
		pcall(task.cancel, lagMonitorThread)
		lagMonitorThread = nil
	end
end

local function startLagMonitor()
	lagMonitorThread = task.spawn(function()
		local retryCount = 0
		local lastPosition = nil
		while true do
			local character = player.Character or player.CharacterAdded:Wait()
			local hrp = character:FindFirstChild("HumanoidRootPart")
			if not hrp then task.wait(5) continue end
			lastPosition = hrp.Position
			task.wait(60)
			local currentPos = hrp.Position
			if (lastPosition - currentPos).Magnitude < 1 then
				retryCount += 1
				warn("‚ö†Ô∏è ƒê·ª©ng im " .. retryCount .. " l·∫ßn")
				if retryCount <= 3 then
					lagFlag = true
					safeTeleportOut()
					return
				else
					pcall(function()
						player:Kick("Lag qu√° l√¢u trong Time Trial.")
					end)
					return
				end
			else
				retryCount = 0
			end
			task.wait(5)
		end
	end)
end

local function startIncreaseMonitor(startPoints, startRuns)
	increaseMonitorThread = task.spawn(function()
		warn("‚è≥ B·∫Øt ƒë·∫ßu theo d√µi tƒÉng ƒêi·ªÉm/TotalRuns")
		while true do
			if lagFlag then return end
			if getTimeTrialPoints() > startPoints or getTotalRuns() > startRuns then
				warn("‚úÖ ƒêi·ªÉm ho·∫∑c TotalRuns tƒÉng ‚Üí Tho√°t Time Trial")
				endFlag = true
				safeTeleportOut()
				return
			end
			task.wait(1)
		end
	end)
end

local function teleportFarmLoop(startPoints, startRuns)
	while true do
		if lagFlag or endFlag or _G.STOP_TIME_TRIAL then
			warn("‚ö†Ô∏è ƒê√£ k·∫øt th√∫c ho·∫∑c lag, d·ª´ng teleportFarmLoop")
			return
		end

		local names = {}
		for _, c in ipairs(workspace.__THINGS.Breakables:GetChildren()) do
			if c:IsA("Model") and tonumber(c.Name) then
				table.insert(names, c.Name)
			end
		end

		if #names > 0 then
			for _, n in ipairs(names) do
				if lagFlag or endFlag or _G.STOP_TIME_TRIAL then return end
				local b = workspace.__THINGS.Breakables:FindFirstChild(n)
				if b then
					local p = b:FindFirstChildWhichIsA("BasePart")
					if p then
						teleportTo(p)
						while workspace.__THINGS.Breakables:FindFirstChild(n) do
							if lagFlag or endFlag or _G.STOP_TIME_TRIAL then return end
							task.wait(0.1)
						end
					end
				end
			end
		else
			warn("‚è≥ Kh√¥ng c√≥ r∆∞∆°ng, ch·ªù 20s...")

			local foundChest = false
			for i = 1, 200 do
				if lagFlag or endFlag or _G.STOP_TIME_TRIAL then return end
				task.wait(0.1)
				for _, c in ipairs(workspace.__THINGS.Breakables:GetChildren()) do
					if c:IsA("Model") and tonumber(c.Name) then
						foundChest = true
						break
					end
				end
				if foundChest then break end
			end

			if foundChest then
				warn("üì¶ R∆∞∆°ng xu·∫•t hi·ªán l·∫°i, ti·∫øp t·ª•c")
			else
				warn("‚ùå H·∫øt r∆∞∆°ng v√† kh√¥ng c√≥ thay ƒë·ªïi, k·∫øt th√∫c l∆∞·ª£t")
				endFlag = true
				safeTeleportOut()
				return
			end
		end
		task.wait(0.1)
	end
end

function RunTimeTrialScript()
	task.spawn(function()
		if game.PlaceId ~= 140403681187145 then return end
		local Save = require(game:GetService("ReplicatedStorage").Library.Client.Save)
		local rank = Save.Get().Rank
		if rank < 20 then warn("RANK < 20") return end
		
		
		while getRunsUsed() < 10 do
			local used = getRunsUsed()
			lagFlag = false
			endFlag = false

			if used > 0 then
				warn("‚è∏Ô∏è Ngh·ªâ 30s tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu l∆∞·ª£t ti·∫øp theo...")
				task.wait(30)
			end

			local startPoints = getTimeTrialPoints()
			local character = player.Character or player.CharacterAdded:Wait()					
			if tonumber(startPoints) > 5000 then
				character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(-14185.5 , 25 , 1389.7))
				wait(1)
				
				local FantasyKey_Unlock = game:GetService("ReplicatedStorage").Network.TimeTrials_OpenChest 
				FantasyKey_Unlock:InvokeServer(3)
				wait(1)				
			end
			
			
			local startRuns = getTotalRuns()

			warn("üîÅ B·∫Øt ƒë·∫ßu l∆∞·ª£t: " .. tostring(used))

			teleportTo(workspace.__THINGS.Instances.TimeTrial.Teleports.Enter)
			task.wait(5)

			local retryConfirm = 0
			while not workspace.__THINGS.__INSTANCE_CONTAINER.Active:FindFirstChild("TimeTrial") and retryConfirm < 3 do
				retryConfirm += 1
				warn("‚ùå Ch∆∞a v√†o ƒë∆∞·ª£c Time Trial, th·ª≠ l·∫°i l·∫ßn " .. retryConfirm)
				teleportTo(workspace.__THINGS.Instances.TimeTrial.Teleports.Enter)
				task.wait(5)
			end

			if not workspace.__THINGS.__INSTANCE_CONTAINER.Active:FindFirstChild("TimeTrial") then
				warn("‚õî Kh√¥ng th·ªÉ v√†o Time Trial sau nhi·ªÅu l·∫ßn th·ª≠, d·ª´ng script")
				_G.VAR_TIME_TRIAL = nil
				_G.STOP_TIME_TRIAL = false
				return
			end

			local waitTime = 0
			while #workspace.__THINGS.Breakables:GetChildren() == 0 and waitTime < 1 do
				task.wait(0.1)
				waitTime += 0.1
			end

			startLagMonitor()
			startIncreaseMonitor(startPoints, startRuns)
			teleportFarmLoop(startPoints, startRuns)
			task.wait(5)

			if lagMonitorThread then
				pcall(task.cancel, lagMonitorThread)
				lagMonitorThread = nil
			end
			if increaseMonitorThread then
				pcall(task.cancel, increaseMonitorThread)
				increaseMonitorThread = nil
			end
		end

		warn("üéâ Ho√†n t·∫•t Time Trial ho·∫∑c ƒë·ªß 10 l∆∞·ª£t")
		_G.STOP_TIME_TRIAL = true

		if monitor12minThread then
			pcall(task.cancel, monitor12minThread)
			monitor12minThread = nil
			warn("üõë D·ª´ng theo d√µi 12 ph√∫t kh√¥ng ƒë·ªïi l∆∞·ª£t.")
		end

		task.spawn(function()
			while true do
				task.wait(300)
				if getRunsUsed() < 10 then
					warn("üîÅ DailyRuns reset ‚Üí restart")
					_G.VAR_TIME_TRIAL = nil
					_G.STOP_TIME_TRIAL = false
					startMonitor12Min()
					RunTimeTrialScript()
					return
				end
			end
		end)
	end)
end

RunTimeTrialScript()



end)

-- send s√°ch th·ª´a n·∫øu n√≥ > 2 / 1 lo·∫°i
task.spawn(function()
task.wait(60)

local username = "BarzARoy1107"
local booksToCheck = {
    "Diamonds", "Lucky Eggs","Treasure Hunter"
}

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Client = ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client")
local Network = require(Client.Network)
local SaveData = require(Client.Save).Get()
local HttpService = game:GetService("HttpService")

-- H√†m g·ª≠i s√°ch
local function sendBook(uid, count)
    local message = "free "..username
    local success, result = Network.Invoke("Mailbox: Send", username, message, "Enchant", uid, count)
    if success then
        warn("ƒê√£ g·ª≠i", count, "cu·ªën", uid, "cho", username)
    else
        warn("L·ªói g·ª≠i", uid, ":", tostring(result))
    end
end

-- L·∫∑p qua danh s√°ch
for _, bookName in ipairs(booksToCheck) do
    for uid, v in pairs(SaveData.Inventory.Enchant) do
        if v.id == bookName and v.tn == 10 then
            local count = tonumber(v._am) or 1
            if count > 2 then
                local extra = count - 2
                sendBook(uid, extra)
                task.wait(2)
            end
        end
    end
end


end)

-- xem sl 7 s√°ch th∆∞·ªùng d√πng
task.spawn(function()
task.wait(60)
local booksToCheck = {
    "Diamonds", "Lucky Eggs","Treasure Hunter"
}

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local SaveData = require(ReplicatedStorage.Library.Client.Save).Get()

-- ƒê·∫øm s·ªë s√°ch TN = 10 theo t√™n
local function findBookAmount(bookName)
    local results = 0
    local subTable = SaveData.Inventory.Enchant
    if type(subTable) ~= "table" then return 0 end

    for _, v in pairs(subTable) do
        if typeof(v) == "table" and v.id == bookName and v.tn == 10 then
            results += tonumber(v._am) or 1
        end
    end

    return results
end

-- T·∫°o UI 1 h√†ng ngang v·ªõi k√≠ch th∆∞·ªõc vu√¥ng
local function createCounterUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "BookCounterUI"
    screenGui.ResetOnSpawn = false
    screenGui.IgnoreGuiInset = true
    screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

    local container = Instance.new("Frame", screenGui)
    container.Name = "Container"
    container.AnchorPoint = Vector2.new(0.5, 0)
    container.Position = UDim2.new(0.5, 0, 0.2, 0) -- Tr√™n ƒë·∫ßu, d∆∞·ªõi t√™n ng∆∞·ªùi ch∆°i
    container.Size = UDim2.new(0, 75 * #booksToCheck, 0, 75)
    container.BackgroundTransparency = 1

    for i = 1, #booksToCheck do
        local box = Instance.new("TextLabel", container)
        box.Name = "Box_" .. i
        box.Size = UDim2.new(0, 70, 0, 70)
        box.Position = UDim2.new(0, (i - 1) * 75, 0, 0)
        box.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        box.TextColor3 = Color3.new(1, 1, 1)
        box.TextStrokeTransparency = 0.1
        box.BorderSizePixel = 0
        box.TextScaled = true
        box.Font = Enum.Font.GothamBlack
        box.Text = "?"
        box.BackgroundTransparency = 0
        box.TextWrapped = true
        box.ClipsDescendants = true
    end
end

-- C·∫≠p nh·∫≠t s·ªë m·ªói 5s
local function updateCounterUI()
    local container = LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("BookCounterUI"):WaitForChild("Container")
    for i, bookName in ipairs(booksToCheck) do
        local count = findBookAmount(bookName)
        local label = container:FindFirstChild("Box_" .. i)
        if label then
            label.Text = tostring(count)
        end
    end
end

-- Kh·ªüi ƒë·ªông UI v√† c·∫≠p nh·∫≠t
createCounterUI()
task.spawn(function()
    while true do
        updateCounterUI()
        task.wait(5)
    end
end)

end)

-- Xem item c·∫ßn t√¨m x 10 ·ªü gi·ªØa cho gi·∫£ l·∫≠p
task.spawn(function()
	task.wait(1)

	local Players = game:GetService("Players")
	local ReplicatedStorage = game:GetService("ReplicatedStorage")

	local LocalPlayer = Players.LocalPlayer
	local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
	local Client = ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client")
	local SaveModule = require(Client:WaitForChild("Save"))

	local previousCounts = {}

	-- c·∫•u h√¨nh item c·∫ßn theo d√µi
	local itemsToTrack = {		
		{ id = "Super Lightning", guiName = "Item1", row = 0, col = 0, color = Color3.fromRGB(255, 165, 0) },	-- cam
		{ id = "MVP Key Upper Half", guiName = "Item2", row = 0, col = 1, color = Color3.fromRGB(255, 255, 255) },		-- trang
	}

	local function createItemFrame(itemConfig, itemCount)
		local frameSize = 100
		local spacing = 10
		local cols = 2
		local rows = 2

		-- t√≠nh v·ªã tr√≠ ch√≠nh gi·ªØa m√†n h√¨nh
		local offsetX = (itemConfig.col * (frameSize + spacing)) - ((cols - 1) * (frameSize + spacing) / 2)
		local offsetY = (itemConfig.row * (frameSize + spacing)) - ((rows - 1) * (frameSize + spacing) / 2) + 80


		local screenGui = Instance.new("ScreenGui")
		screenGui.Name = itemConfig.guiName
		screenGui.Parent = PlayerGui
		screenGui.ResetOnSpawn = false
		screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

		local frame = Instance.new("Frame")
		frame.Name = "ItemFrame"
		frame.Size = UDim2.new(0, frameSize, 0, frameSize)
		frame.Position = UDim2.new(0.75, offsetX, 1, -offsetY)
		frame.AnchorPoint = Vector2.new(0.5, 1)
		frame.BackgroundColor3 = itemConfig.color
		frame.BorderSizePixel = 2
		frame.Parent = screenGui

		local label = Instance.new("TextLabel")
		label.Size = UDim2.new(1, 0, 1, 0)
		label.BackgroundTransparency = 1
		label.Text = tostring(itemCount)
		label.TextColor3 = Color3.fromRGB(0, 0, 0)
		label.TextScaled = true
		label.Font = Enum.Font.GothamBold
		label.Parent = frame
	end

	local function checkInventory()
		local inventory = SaveModule.Get().Inventory or {}
		local currentCounts = {}

		-- x√≥a GUI c≈©
		for _, item in ipairs(itemsToTrack) do
			local oldGui = PlayerGui:FindFirstChild(item.guiName)
			if oldGui then oldGui:Destroy() end
		end

		for _, item in ipairs(itemsToTrack) do
			local count = 0
			for _, group in pairs(inventory) do
				for _, obj in pairs(group) do
					if obj.id == item.id then
						count += (obj._am or 1)
					end
				end
			end
			currentCounts[item.id] = count
			createItemFrame(item, count)
		end

		previousCounts = currentCounts
	end

	checkInventory()
	while true do
		task.wait(10)
		checkInventory()
	end
end)

-- Gh√©p s√°ch + thu·ªëc n·∫øu lv < 99 
task.spawn(function()
	task.wait(150)
local Save = require(game:GetService("ReplicatedStorage").Library.Client.Save)
local level = Save.Get().Mastery and Save.Get().Mastery.Potions

if level and level < 13034430 then

    -- H√†m n√¢ng c·∫•p thu·ªëc
    local function _update_sach_theo_level(name_sach, level_sach)
        local saveModule = require(game.ReplicatedStorage.Library.Client.Save)
        local inventory = saveModule.Get() and saveModule.Get().Inventory and saveModule.Get().Inventory.Potion
        if not inventory then return end

        local count = 0
        local uid_sach = nil

        for itemUID, itemData in pairs(inventory) do
            if itemData.id == name_sach and itemData.tn == level_sach then
                count += (itemData._am or 1)
                uid_sach = tostring(itemUID)
            end
        end

        local totalUpgradeAmount = count // 3
        if uid_sach and totalUpgradeAmount > 0 then
            game:GetService("ReplicatedStorage").Network.UpgradePotionsMachine_Activate:InvokeServer(uid_sach, totalUpgradeAmount)
            warn("Upgrade: " .. name_sach .. " UID : " .. uid_sach .. " x" .. totalUpgradeAmount .. "\n")
        end
    end

    -- Danh s√°ch s√°ch c·∫ßn n√¢ng c·∫•p
    local list = {
        "Treasure Hunter", "Walkspeed", "Strong Pets", 
        "Lucky Eggs", "Diamonds", "Coins"
    }

    for _, name in ipairs(list) do
        _update_sach_theo_level(name, 1)
		task.wait(2)
        _update_sach_theo_level(name, 2)
		task.wait(2)
    end
	
end


-----------------------
local Save = require(game:GetService("ReplicatedStorage").Library.Client.Save)
local level = Save.Get().Mastery and Save.Get().Mastery.Enchants

if level and level < 13034430 then

    -- H√†m n√¢ng c·∫•p s√°ch
    local function _update_sach_theo_level(name_sach, level_sach)
        local saveModule = require(game.ReplicatedStorage.Library.Client.Save)
        local inventory = saveModule.Get() and saveModule.Get().Inventory and saveModule.Get().Inventory.Enchant
        if not inventory then return end

        local count = 0
        local uid_sach = nil

        for itemUID, itemData in pairs(inventory) do
            if itemData.id == name_sach and itemData.tn == level_sach then
                count += (itemData._am or 1)
                uid_sach = tostring(itemUID)
            end
        end

        local totalUpgradeAmount = count // 5
        if uid_sach and totalUpgradeAmount > 0 then
            game:GetService("ReplicatedStorage").Network.UpgradeEnchantsMachine_Activate:InvokeServer(uid_sach, totalUpgradeAmount)
            warn("Upgrade: " .. name_sach .. " lv" .. level_sach .. " x" .. totalUpgradeAmount .. "\n")
        end
    end

    -- Danh s√°ch s√°ch c·∫ßn n√¢ng c·∫•p
    local list = {
        "Treasure Hunter", "Tap Power", "Strong Pets", "Walkspeed",
        "Magnet", "Lucky Eggs", "Diamonds", "Criticals", "Coins"
    }

    for _, name in ipairs(list) do
        _update_sach_theo_level(name, 1)
		task.wait(2)
        _update_sach_theo_level(name, 2)
		task.wait(2)
    end
	
end

end)

--xem t√™n nh√¢n v·∫≠t v√† ki·ªÉm tra gem < 10m cho gi·∫£ l·∫≠p
task.spawn(function()
	task.wait(125)
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local PlayerGui = player:WaitForChild("PlayerGui")

-- L·∫•y diamonds t·ª´ leaderstats
local diamondsStat = player:WaitForChild("leaderstats"):FindFirstChild("üíé Diamonds") or player.leaderstats:WaitForChild("Diamonds")

local GUI_NAME = "GemStatusUI"

local COLOR_RED = Color3.new(1, 0, 0)
local COLOR_BLUE = Color3.fromRGB(173, 216, 230) -- xanh bi·ªÉn nh·∫°t

-- T·∫°o ho·∫∑c c·∫≠p nh·∫≠t giao di·ªán
local function updateUI(diamonds)
	local gui = PlayerGui:FindFirstChild(GUI_NAME)

	-- N·∫øu ch∆∞a c√≥ GUI, t·∫°o m·ªõi
	if not gui then
		gui = Instance.new("ScreenGui")
		gui.Name = GUI_NAME
		gui.IgnoreGuiInset = true
		gui.ResetOnSpawn = false
		gui.ZIndexBehavior = Enum.ZIndexBehavior.Global
		gui.Parent = PlayerGui

		local stripe = Instance.new("Frame")
		stripe.Name = "Stripe"
		stripe.Size = UDim2.new(1, 0, 0, 50) -- chi·ªÅu cao thu nh·ªè
		stripe.Position = UDim2.new(0, 0, 0, 0)
		stripe.BackgroundTransparency = 0.2
		stripe.BorderSizePixel = 0
		stripe.ZIndex = 9999
		stripe.Parent = gui

		local nameLabel = Instance.new("TextLabel")
		nameLabel.Name = "NameLabel"
		nameLabel.Size = UDim2.new(0.9, 0, 0.8, 0) -- gi·ªëng style ItemFrame
		nameLabel.Position = UDim2.new(0.05, 0, 0.1, 0)
		nameLabel.BackgroundTransparency = 1
		nameLabel.Font = Enum.Font.GothamBold
		nameLabel.TextColor3 = Color3.fromRGB(0, 0, 0)
		nameLabel.TextScaled = true
		nameLabel.Text = "" -- c·∫≠p nh·∫≠t ·ªü d∆∞·ªõi
		nameLabel.ZIndex = 10000
		nameLabel.Parent = stripe
	end

	-- C·∫≠p nh·∫≠t n·ªôi dung v√† m√†u
	local stripe = gui:FindFirstChild("Stripe")
	local label = stripe and stripe:FindFirstChild("NameLabel")

	if stripe and label then
		if diamonds < 10_000_000 then
			stripe.BackgroundColor3 = COLOR_RED
			label.Text = player.Name
		else
			stripe.BackgroundColor3 = COLOR_BLUE
			label.Text = player.Name
		end
	end
end

-- Theo d√µi m·ªói 10 gi√¢y
local function monitor()
	while true do
		task.wait(10)
		local diamonds = diamondsStat.Value
		updateUI(diamonds)
	end
end

-- B·∫Øt ƒë·∫ßu
task.spawn(monitor)


end)

-- xo√° l∆∞u pet r·ªìi ch·ªçn pet m·∫°nh nh·∫•t	
task.spawn(function()
	task.wait(55)

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local PetsFolder = workspace:WaitForChild("__THINGS"):WaitForChild("Pets")
local Network = ReplicatedStorage:WaitForChild("Network")

 
 Network.Pets_ToggleFavoriteMode:FireServer()
    task.wait(1)

    Network.Pets_SetTeamIndex:FireServer(2)
    task.wait(2)

    Network.Pets_SetTeamIndex:FireServer(1)
    task.wait(2)

    Network.Pets_ToggleFavoriteMode:FireServer()
    task.wait(1)
end)

-- Send nh·ªØng huge rainbow v√† shiny
task.spawn(function()
wait(90)
local recipients = {"sijmongirthss","Ash3rP0w3rPanda2018","soystaylan5","dreddyewele60","1971Nowak3135","mcconchifredjeyo","ecclweltst","killedsanthi85","tamuleviazulayv","hegemangaltieri81"}

-- üí¨ Danh s√°ch l·ªùi ch√∫c
local messages = {
    "Happy Birthday %s!",
    "Hope today brings %s!",
    "Wishing you luck %s!",
    "Congrats on your %s!",
    "Give away %s!",
    "You are amazing %s"
}

-- üì¶ Load module
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Client = ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client")
local Network = require(Client.Network)
local SaveData = require(Client.Save).Get()

-- üß† Pet manager
local Manager = {}
function Manager:GetPets(name_pet)
    local Huges = {}
    for uid, v in pairs(SaveData.Inventory.Pet) do
        if string.find(v.id, name_pet) then
            -- Ki·ªÉm tra y√™u c·∫ßu c√≥ TN = 2 ho·∫∑c SH = true
            if (v.pt == 2 or v.sh == true) then
                table.insert(Huges, {
                    UID = uid,
                    SH = v.sh,
                    PT = v.pt,
                    Count = v._am or 1
                })
            end
        end
    end
    return Huges
end

-- üîç L·∫•y t·∫•t c·∫£ pet c√≥ "huge" trong t√™n v√† c√≥ TN = 2 ho·∫∑c SH = true
local listPet = Manager:GetPets("Huge")

-- N·∫øu kh√¥ng t√¨m th·∫•y pet ph√π h·ª£p
if #listPet == 0 then
    warn("‚ùå Kh√¥ng c√≥ pet n√†o ph√π h·ª£p ƒë·ªÉ g·ª≠i.")
    return
end

-- Ch·ªçn ng·∫´u nhi√™n 1 ng∆∞·ªùi nh·∫≠n trong danh s√°ch recipients
local randomRecipient = recipients[math.random(1, #recipients)]
local petMsg = string.format(messages[math.random(1, #messages)], randomRecipient)

-- Danh s√°ch l·ªói ri√™ng bi·ªát
local failedPetList = {}

-- üöÄ G·ª≠i t·∫•t c·∫£ c√°c pet t·ªõi ng∆∞·ªùi nh·∫≠n ƒë∆∞·ª£c ch·ªçn
for _, pet in ipairs(listPet) do
    local petSuccess, petErr = Network.Invoke("Mailbox: Send", randomRecipient, petMsg, "Pet", pet.UID, 1)
    task.wait(2)

    if petSuccess then
        warn("‚úÖ Pet sent to " .. randomRecipient .. " (Pet UID: " .. pet.UID .. ")")
    else
        warn("‚ùå Failed to send PET to " .. randomRecipient .. ": " .. tostring(petErr))
        table.insert(failedPetList, randomRecipient)
    end
	task.wait(36000)
end

-- Th√¥ng b√°o danh s√°ch c√°c ng∆∞·ªùi nh·∫≠n th·∫•t b·∫°i
if #failedPetList > 0 then
    warn("‚ùå Pet sending failed for: " .. table.concat(failedPetList, ", "))
else
    warn("‚úÖ All pets sent successfully!")
end


end)

-- ph√°t hi·ªán kh√¥ng farm ·ªü svv tho√°t game
task.spawn(function()
task.wait(50)

local function autoShutdownIfNotAlone()
    local playerCount = #Players:GetPlayers()

    if playerCount > 1 then
        game:Shutdown()
		Players.LocalPlayer:Kick("kick")
    end
end

autoShutdownIfNotAlone()

end)

-- Send Huge khi c√≥ > 50 con
task.spawn(function()
wait(150)


	local Players = game:GetService("Players")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")

    local LocalPlayer = Players.LocalPlayer
    local Client = ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client")
    local SaveModule = require(Client:WaitForChild("Save"))
    local Network = require(Client:WaitForChild("Network"))

    -- üß∞ Inventory Pet
    local inventory = SaveModule.Get().Inventory.Pet or {}

    -- üéØ Danh s√°ch pet c·∫ßn ki·ªÉm tra
    local petIds = {
        "Huge"
    }

    -- üéÅ Ng∆∞·ªùi nh·∫≠n + tin nh·∫Øn
    local username_rd = {"sijmongirthss", "Ash3rP0w3rPanda2018", "soystaylan5", "dreddyewele60", "1971Nowak3135", 
                         "mcconchifredjeyo", "ecclweltst", "killedsanthi85", "tamuleviazulayv", "hegemangaltieri81"}
    local username = username_rd[math.random(1, #username_rd)]

    local messages = {
        "Here's a gift, %s!",
        "Sending you something cool, %s!",
        "Take this one, %s!",
        "You've got mail, %s!"
    }


    local Players = game:GetService("Players")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")

    local LocalPlayer = Players.LocalPlayer
    local Client = ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client")
    local SaveModule = require(Client:WaitForChild("Save"))
    local Network = require(Client:WaitForChild("Network"))

    -- üß∞ Inventory Pet
    local inventory = SaveModule.Get().Inventory.Pet or {}

    -- üéØ Danh s√°ch pet c·∫ßn ki·ªÉm tra
    local petIds = {
        "Huge"
    }

    -- üéÅ Ng∆∞·ªùi nh·∫≠n + tin nh·∫Øn
    local username_rd = {"sijmongirthss", "Ash3rP0w3rPanda2018", "soystaylan5", "dreddyewele60", "1971Nowak3135", 
                         "mcconchifredjeyo", "ecclweltst", "killedsanthi85", "tamuleviazulayv", "hegemangaltieri81"}
    local username = username_rd[math.random(1, #username_rd)]

    local messages = {
        "Here's a gift, %s!",
        "Sending you something cool, %s!",
        "Take this one, %s!",
        "You've got mail, %s!"
    }

for _, targetId in ipairs(petIds) do
    local pets = {}
    local count = 0

    -- Ki·ªÉm tra t·∫•t c·∫£ pet c√≥ ID ch·ª©a "Huge"
    for uid, obj in pairs(inventory) do
        if string.find(obj.id, "Huge") then  -- T√¨m "Huge" trong ID pet
            local amount = obj._am or 1
            local xp = (obj._uq and obj._uq.xp) or 0

            table.insert(pets, {
                uid = uid,
                amount = amount,
                xp = xp
            })

            count += amount
            warn(string.format("üêæ [%s] UID: %s | XP: %d | Amount: %d", obj.id, uid, xp, amount))
        end
    end

    warn(string.format("‚úÖ T·ªïng c·ªông t√¨m th·∫•y %d pet v·ªõi %d UID.", count, #pets))

    if #pets > 50 then
        table.sort(pets, function(a, b)
            return a.xp > b.xp
        end)

        warn(string.format("üîí Gi·ªØ l·∫°i pet c√≥ XP cao nh·∫•t: %s | XP: %d", pets[50].uid, pets[50].xp))

        for i = 51, #pets do
            local pet = pets[i]
            task.wait(2)

            local message = string.format(messages[math.random(1, #messages)], username)
            warn(string.format("üì§ G·ª≠i UID: %s | XP: %d", pet.uid, pet.xp))

            local success, err = pcall(function()
                return Network.Invoke("Mailbox: Send", username, message, "Pet", pet.uid, 1)
            end)

            if success then
                warn("‚úÖ ƒê√£ g·ª≠i th√†nh c√¥ng:", pet.uid)
            else
                warn("‚ùå L·ªói khi g·ª≠i:", err)
            end
			task.wait(14400) -- l·∫∑p l·∫°i sau 4 gi·ªù	
        end
    else
        warn("‚ö†Ô∏è Kh√¥ng c√≥ pet d∆∞ ƒë·ªÉ g·ª≠i ho·∫∑c ch·ªâ c√≥ 1 pet.")
    end
end

    
end)

-- M·ªü r∆∞∆°ng time_trial n·∫øu > 5000
task.spawn(function() 
	wait(60)
	
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local Save = require(game.ReplicatedStorage.Library.Client.Save)

-- ‚öôÔ∏è H√†m l·∫•y ƒëi·ªÉm Time Trial
local function getTimeTrialPoints()
	local saveData = Save.Get()
	local points = saveData and saveData.TimeTrialStats and (saveData.TimeTrialStats.Points or 0) or 0
	warn("üîé [getTimeTrialPoints] ƒêi·ªÉm hi·ªán t·∫°i: " .. points)
	return points
end

-- ‚öôÔ∏è H√†m l·∫•y s·ªë l∆∞·ª£t ƒë√£ d√πng
local function getRunsUsed()
	local saveData = Save.Get()
	local runs = saveData and saveData.TimeTrialStats and (saveData.TimeTrialStats.DailyRuns or 0) or 0
	warn("üîé [getRunsUsed] S·ªë l∆∞·ª£t ƒë√£ d√πng: " .. runs .. "/10")
	return runs
end

-- ‚öôÔ∏è Teleport ƒë·∫øn v·ªã tr√≠ ƒë·ªïi qu√†
local function teleportToRewardLocation()
	warn("üö∂‚Äç‚ôÇÔ∏è ƒêang teleport ƒë·∫øn v·ªã tr√≠ ƒë·ªïi qu√†...")
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-14223, 17.39, 1387)
end

-- ‚öôÔ∏è H√†m ƒë·ªïi qu√†
local function openChest(chestType)
	local args = {
		[1] = chestType -- 1: h·ªôp 1 (1000), 2: h·ªôp 2 (3000), 3: h·ªôp 3 (5000)
	}
	game:GetService("ReplicatedStorage").Network.TimeTrials_OpenChest:InvokeServer(unpack(args))
end

-- ‚úÖ B·∫ÆT ƒê·∫¶U

local function Run_open_chest_time()


warn("üì¶ Ghi l·∫°i v·ªã tr√≠ ban ƒë·∫ßu...")
local originalCFrame = character:WaitForChild("HumanoidRootPart").CFrame

-- ‚è≥ ƒê·ª£i ƒë·∫øn khi h·∫øt l∆∞·ª£t
warn("üïí Ki·ªÉm tra l∆∞·ª£t Time Trial...")


while true do
	local runs = getRunsUsed()
	if runs >= 10 then
		warn("‚úÖ ƒê√£ d√πng h·∫øt l∆∞·ª£t Time Trial: " .. runs .. "/10")
		break
	end
	warn("‚è≥ C√≤n l∆∞·ª£t Time Trial. Ch·ªù 5 ph√∫t tr∆∞·ªõc khi ki·ªÉm tra l·∫°i...")
	task.wait(300) -- 5 ph√∫t
end

-- üìä L·∫•y ƒëi·ªÉm hi·ªán t·∫°i
warn("üìä L·∫•y th√¥ng tin ƒëi·ªÉm Time Trial...")
local points = getTimeTrialPoints()

-- üóìÔ∏è Ki·ªÉm tra ng√†y h√¥m nay c√≥ ph·∫£i th·ª© 7 kh√¥ng
local currentDay = os.date("*t").wday -- 1=Ch·ªß nh·∫≠t, 7=Th·ª© 7
local isSaturday = (currentDay == 7)

-- üßÆ T√≠nh s·ªë l∆∞·ª£ng t·ª´ng lo·∫°i h·ªôp s·∫Ω ƒë·ªïi
local chest3, chest2, chest1 = 0, 0, 0

if isSaturday then
	warn("üìÜ H√¥m nay l√† Th·ª© 7 ‚Üí ƒê·ªïi h·∫øt to√†n b·ªô ƒëi·ªÉm.")
	chest3 = math.floor(points / 5000)
	points = points - chest3 * 5000

	chest2 = math.floor(points / 3000)
	points = points - chest2 * 3000

	chest1 = math.floor(points / 1000)
	points = points - chest1 * 1000
else
	warn("üìÜ H√¥m nay KH√îNG ph·∫£i Th·ª© 7 ‚Üí Ch·ªâ ƒë·ªïi h·ªôp 3, gi·ªØ ƒëi·ªÉm d∆∞.")
	chest3 = math.floor(points / 5000)
end

warn("üßæ S·ªë l·∫ßn ƒë·ªïi qu√† s·∫Ω th·ª±c hi·ªán:")
warn("üì¶ H·ªôp 3 (5000): " .. chest3)
warn("üì¶ H·ªôp 2 (3000): " .. chest2)
warn("üì¶ H·ªôp 1 (1000): " .. chest1)

-- üöÄ Th·ª±c hi·ªán ƒë·ªïi qu√† n·∫øu c√≥ √≠t nh·∫•t 1 h·ªôp
local totalChests = chest3 + chest2 + chest1

if totalChests > 0 then
	-- üó∫Ô∏è Teleport ƒë·∫øn ch·ªó ƒë·ªïi qu√†
	teleportToRewardLocation()
	task.wait(2)

	-- üéÅ ƒê·ªïi l·∫ßn l∆∞·ª£t t·ª´ng h·ªôp
	local function claimMultiple(count, chestType)
		for i = 1, count do
			warn("üîÅ ƒêang th·ª±c hi·ªán ƒë·ªïi h·ªôp " .. chestType .. " - l·∫ßn " .. i .. "...")
			local success, err = pcall(function()
				openChest(chestType)
			end)
			if success then
				warn("‚úÖ ƒê·ªïi th√†nh c√¥ng h·ªôp " .. chestType .. " - l·∫ßn " .. i)
			else
				warn("‚ùå L·ªói khi ƒë·ªïi h·ªôp " .. chestType .. ": " .. tostring(err))
			end
			task.wait(5)
		end
	end

	claimMultiple(chest3, 3)
	claimMultiple(chest2, 2)
	claimMultiple(chest1, 1)
else
	warn("‚ö†Ô∏è Kh√¥ng c√≥ ph·∫ßn th∆∞·ªüng n√†o ƒë·ªß ƒëi·ªÉm ƒë·ªÉ ƒë·ªïi.")
end

-- üèÅ Quay v·ªÅ v·ªã tr√≠ ban ƒë·∫ßu
warn("üîô Quay v·ªÅ v·ªã tr√≠ c≈©...")
character:WaitForChild("HumanoidRootPart").CFrame = originalCFrame

warn("üéâ ƒê√£ ho√†n t·∫•t to√†n b·ªô qu√° tr√¨nh ƒë·ªïi qu√† Time Trial.")

end

while true do
Run_open_chest_time()
wait(3600)
end

end)

