
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Client = ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client")
local SaveData = require(Client.Save).Get()

local Enchants_Equip = ReplicatedStorage.Network.Enchants_Equip
local Enchants_ClearSlot = ReplicatedStorage.Network.Enchants_ClearSlot

-- Gom stack theo bookName và sort theo tn giảm dần
local function getBookStackListFull(bookName)
    local stacks = {}

    for uid, v in pairs(SaveData.Inventory.Enchant) do
        if v.id and string.find(v.id, bookName) and (v._am or 1) > 0 then
            table.insert(stacks, {
                uid = uid,
                tn = v.tn or 0,
                amount = v._am or 1
            })
        end
    end

    table.sort(stacks, function(a, b)
        return a.tn > b.tn
    end)

    return stacks
end

function autoEquipEnchantBooks(bookList)

	local MaxEnchantsEquipped = SaveData.MaxEnchantsEquipped or 0
    local MaxPaidEnchantsEquipped = SaveData.MaxPaidEnchantsEquipped or 0
    local MaxEnchantsEquipped = MaxEnchantsEquipped + MaxPaidEnchantsEquipped


    -- Clear all slots
    for i = 1, 9 do
        Enchants_ClearSlot:FireServer(i)
        task.wait(0.3)
    end

    local equippedCount = 0

    -- Đếm số lượng mỗi bookName được yêu cầu
    local requestedCounts = {}
    for _, bookName in ipairs(bookList) do
        requestedCounts[bookName] = (requestedCounts[bookName] or 0) + 1
    end

    for bookName, requestCount in pairs(requestedCounts) do
        if equippedCount >= MaxEnchantsEquipped then
            break
        end

        local stacks = getBookStackListFull(bookName)
        local countForThisBook = 0

        for _, stack in ipairs(stacks) do
            for n = 1, stack.amount do
                if equippedCount >= MaxEnchantsEquipped or countForThisBook >= requestCount then
                    break
                end

                Enchants_Equip:FireServer(stack.uid)
                equippedCount = equippedCount + 1
                countForThisBook = countForThisBook + 1
                task.wait(0.3)
            end
            if countForThisBook >= requestCount then
                break
            end
        end
    end
end


autoEquipEnchantBooks({"Breakable Mayhem","Explosive","Diamonds","Treasure Hunter","Fruity","Fortune","Lucky Eggs","Diamonds","Lucky Eggs"})


-- map 269 event time trial
task.spawn(function()
wait(100)
local Save = require(game:GetService("ReplicatedStorage").Library.Client.Save)
local rank = Save.Get().Rank
if rank < 20 then warn("RANK < 20") return end


_G.STOP_TIME_TRIAL = false
--if _G.STOP_TIME_TRIAL == false then 
--	return
--end


local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

local Save = require(ReplicatedStorage.Library.Client.Save)
local ZoneCmds = require(ReplicatedStorage.Library.Client.ZoneCmds)

local lagFlag = false
local endFlag = false
local lagMonitorThread, increaseMonitorThread, monitor12minThread

-- 🛡️ Lấy HumanoidRootPart an toàn
local function getHumanoidRootPart()
	local character = player.Character or player.CharacterAdded:Wait()
	if not character then return nil end

	local hrp = character:FindFirstChild("HumanoidRootPart")
	local waitTime = 0
	while not hrp and waitTime < 5 do
		task.wait(0.5)
		waitTime += 0.5
		hrp = character:FindFirstChild("HumanoidRootPart")
	end

	return hrp
end

-- 📊 Hàm tiện ích
local function getRunsUsed()
	local saveData = Save.Get()
	return saveData and saveData.TimeTrialStats and (saveData.TimeTrialStats.DailyRuns or 0) or 0
end

local function getRunsLeft()
	return 10 - getRunsUsed()
end

local function getTimeTrialPoints()
	local saveData = Save.Get()
	return saveData and saveData.TimeTrialStats and (saveData.TimeTrialStats.Points or 0) or 0
end

local function getTotalRuns()
	local saveData = Save.Get()
	return saveData and saveData.TimeTrialStats and (saveData.TimeTrialStats.TotalRuns or 0) or 0
end

-- 🗺️ Teleport hỗ trợ
local function teleportTo(part)
	local hrp = getHumanoidRootPart()
	if hrp and part and part.CFrame then
		hrp.CFrame = part.CFrame + Vector3.new(0, 10, 0)
	end
end

local function teleportToLocation()
	warn("🚶‍♂️ Đang teleport về vị trí map 269...")
	local hrp = getHumanoidRootPart()
	if hrp then
		hrp.CFrame = CFrame.new(-14251, 20, 1336)
	end
end

local function safeTeleportOut()
	teleportTo(workspace.__THINGS.Instances.TimeTrial.Teleports.Leave)
	task.wait(9)
	if increaseMonitorThread then pcall(task.cancel, increaseMonitorThread) increaseMonitorThread = nil end
	if lagMonitorThread then pcall(task.cancel, lagMonitorThread) lagMonitorThread = nil end
end

-- 📺 GUI hiển thị điểm và lượt
local screenGui = playerGui:FindFirstChild("TimeTrialGui")
if not screenGui then
	screenGui = Instance.new("ScreenGui")
	screenGui.Name = "TimeTrialGui"
	screenGui.ResetOnSpawn = false
	screenGui.Parent = playerGui
end

local function createLabel(name, position, anchor, bgColor)
	local label = Instance.new("TextLabel")
	label.Name = name
	label.AnchorPoint = anchor
	label.Position = position
	label.Size = UDim2.new(0, 0, 0, 38)
	label.BackgroundColor3 = bgColor
	label.TextColor3 = Color3.new(1, 1, 1)
	label.Font = Enum.Font.GothamBold
	label.TextSize = 32
	label.BackgroundTransparency = 0
	label.BorderSizePixel = 0
	label.TextXAlignment = Enum.TextXAlignment.Center
	label.Text = "..."
	label.Parent = screenGui
	return label
end

local function updateLabelSize(label)
	label.Size = UDim2.new(0, label.TextBounds.X + 20, 0, 38)
end

local pointsLabel = screenGui:FindFirstChild("PointsLabel") or createLabel("PointsLabel", UDim2.new(0.3, 0, 0.1, -55), Vector2.new(0, 0), Color3.fromRGB(0, 128, 255))
local timeTrialLabel = screenGui:FindFirstChild("TimeTrialLabel") or createLabel("TimeTrialLabel", UDim2.new(0.79, 0, 0.1, -55), Vector2.new(0, 0), Color3.fromRGB(128, 0, 128))

task.spawn(function()
	while true do
		pointsLabel.Text = tostring(getTimeTrialPoints())
		updateLabelSize(pointsLabel)
		timeTrialLabel.Text = tostring(getRunsLeft())
		updateLabelSize(timeTrialLabel)
		task.wait(10)
	end
end)

-- 🔍 Chờ đến khi đạt MaxZone ở map 4
local function getMaxZoneFromMap4()
	local mapFolder = workspace:FindFirstChild("Map4")
	if not mapFolder then return 0 end
	local maxZone = 0
	for _, folder in ipairs(mapFolder:GetChildren()) do
		if folder:IsA("Folder") then
			local zoneNumber = tonumber(folder.Name:match("^(%d+)"))
			if zoneNumber and zoneNumber > maxZone then
				maxZone = zoneNumber
			end
		end
	end
	return maxZone
end

local function waitUntilReachMaxZone()
	local maxMapZone = getMaxZoneFromMap4()
	while true do
		local success, data = pcall(function()
			local _, zoneData = ZoneCmds.GetMaxOwnedZone()
			return zoneData
		end)
		local current = success and data and data.ZoneNumber or 0
		if current >= maxMapZone then
			warn("✅ Đã đạt Zone tối đa (" .. tostring(current) .. ")")
			break
		end
		warn("⏳ Chưa đạt Zone tối đa (" .. tostring(current) .. "/" .. tostring(maxMapZone) .. "), đợi 60s...")
		task.wait(6000)
	end
end

-- ⏱️ Monitor 12 phút không tăng lượt
local function startMonitor12Min()
	monitor12minThread = task.spawn(function()
		while true do
			if getRunsUsed() >= 10 then
				warn("🛑 Đã đủ 10 lượt → dừng theo dõi 12 phút.")
				return
			end

			local startUsed = getRunsUsed()
			local startTotal = getTotalRuns()
			local t = 0
			while t < 600 do
				task.wait(10)
				t += 10
				if getRunsUsed() ~= startUsed or getTotalRuns() ~= startTotal then break end
				if getRunsUsed() >= 10 then return end
			end

			if getRunsUsed() == startUsed and getTotalRuns() == startTotal then
				player:Kick("⏰ 10 phút không đổi lượt hoặc tổng Time Trial → nghi ngờ treo máy.")
				game:Shutdown()  -- Thoát game
				return
			end
		end
	end)
end

-- 📌 Theo dõi đứng yên
local function startLagMonitor()
	lagMonitorThread = task.spawn(function()
		local retryCount = 0
		local lastPosition = nil
		while true do
			local hrp = getHumanoidRootPart()
			if not hrp then task.wait(5) continue end

			lastPosition = hrp.Position
			task.wait(60)

			local currentPos = hrp.Position
			if (lastPosition - currentPos).Magnitude < 1 then
				retryCount += 1
				warn("⚠️ Đứng im " .. retryCount .. " lần")

				if retryCount > 3 then
					player:Kick("Lag quá lâu trong Time Trial.")
					game:Shutdown()  -- Thoát game
					return
				else
					lagFlag = true
					safeTeleportOut()
				end
			else
				retryCount = 0
			end
			task.wait(5)
		end
	end)
end

-- 🧠 Theo dõi tăng điểm
local function startIncreaseMonitor(startPoints, startRuns)
	increaseMonitorThread = task.spawn(function()
		warn("⏳ Theo dõi tăng Điểm/TotalRuns")
		while true do
			if lagFlag then return end
			if getTimeTrialPoints() > startPoints or getTotalRuns() > startRuns then
				warn("✅ Điểm hoặc TotalRuns tăng → Thoát Time Trial")
				endFlag = true
				safeTeleportOut()
				return
			end
			task.wait(1)
		end
	end)
end

-- 🔁 Teleport farm breakables
local function teleportFarmLoop(startPoints, startRuns)
	while true do
		if lagFlag or endFlag or _G.STOP_TIME_TRIAL then
			warn("⚠️ Dừng teleportFarmLoop")
			return
		end

		-- 🔍 Kiểm tra nhân vật đã hồi sinh và có HRP chưa
		local hrp = getHumanoidRootPart()
		if not hrp then
			warn("⚠️ Không tìm thấy HumanoidRootPart → đợi hồi sinh...")
			task.wait(3)
			continue
		end

		local names = {}
		for _, c in ipairs(workspace.__THINGS.Breakables:GetChildren()) do
			if c:IsA("Model") and tonumber(c.Name) then
				table.insert(names, c.Name)
			end
		end

		if #names > 0 then
			for _, n in ipairs(names) do
				if lagFlag or endFlag or _G.STOP_TIME_TRIAL then return end
				local b = workspace.__THINGS.Breakables:FindFirstChild(n)
				if b then
					local p = b:FindFirstChildWhichIsA("BasePart")
					if p then
						teleportTo(p)
						while workspace.__THINGS.Breakables:FindFirstChild(n) do
							if lagFlag or endFlag or _G.STOP_TIME_TRIAL then return end
							task.wait(0.1)
						end
					end
				end
			end
		else
			warn("⏳ Không có rương, chờ 20s...")
			local found = false
			for i = 1, 200 do
				if lagFlag or endFlag or _G.STOP_TIME_TRIAL then return end
				task.wait(0.1)
				for _, c in ipairs(workspace.__THINGS.Breakables:GetChildren()) do
					if c:IsA("Model") and tonumber(c.Name) then
						found = true
						break
					end
				end
				if found then break end
			end
			if not found then
				warn("❌ Hết rương → kết thúc lượt")
				endFlag = true
				safeTeleportOut()
				return
			end
		end

		task.wait(0.1)
	end
end

-- 🧹 Cleanup toàn bộ threads
local function cleanupAllThreads()
	warn("🧹 Cleanup toàn bộ thread & trạng thái")
	if lagMonitorThread then pcall(task.cancel, lagMonitorThread) lagMonitorThread = nil end
	if increaseMonitorThread then pcall(task.cancel, increaseMonitorThread) increaseMonitorThread = nil end
	if monitor12minThread then pcall(task.cancel, monitor12minThread) monitor12minThread = nil end
	lagFlag = false
	endFlag = false
	_G.STOP_TIME_TRIAL = false
	_G.VAR_TIME_TRIAL = nil
end

-- 🎁 Đổi quà
local function claimReward()

Thu_7_openall = false
if Thu_7_openall == true then
	diem_toi_thieu_thoat = 999
else
	diem_toi_thieu_thoat = 4999
end

if getTimeTrialPoints() < diem_toi_thieu_thoat then	
return 
end

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

-- Hàm teleport đến vị trí nhận thưởng
local function teleportToRewardLocation()
    warn("🚶‍♂️ Đang teleport đến vị trí đổi quà...")
    player.Character.HumanoidRootPart.CFrame = CFrame.new(-14186, 20, 2206)
end

-- Hàm mở chest với số điểm nhất định
local function openChest(pointsRequired, chestId)
    if getTimeTrialPoints() >= pointsRequired then
        teleportToRewardLocation()
        wait(0.5)
        local FantasyKey_Unlock = ReplicatedStorage.Network.TimeTrials_OpenChest
        FantasyKey_Unlock:InvokeServer(chestId)
        wait(1)
  
  
    end
end

while true do

	openChest(5000, 3)  -- Mở chest yêu cầu 5000 điểm
	openChest(5000, 3)  -- Mở chest yêu cầu 5000 điểm
	openChest(5000, 3)  -- Mở chest yêu cầu 5000 điểm
	if Thu_7_openall == true then
		openChest(3000, 2)  -- Mở chest yêu cầu 3000 điểm	
		openChest(1000, 1)  -- Mở chest yêu cầu 1000 điểm
	end
	if getTimeTrialPoints() < diem_toi_thieu_thoat then
		break
	end
wait(2)
end


end


-- ✅ VÒNG LẶP CHÍNH
task.spawn(function()

	
		if game.PlaceId ~= 140403681187145 then return end
		
		
	waitUntilReachMaxZone()
	startMonitor12Min()		
		
		
	while true do
		-- sách trial time
		autoEquipEnchantBooks({"Explosive","Chest Breaker","Criticals","Strong Pets","Fruity","Happy Pets","Super Lightning","Tap Power","Large Taps"})
		
		while getRunsUsed() < 10 do
			
			local used = getRunsUsed()
			lagFlag = false
			endFlag = false

			if used > 0 then
				warn("⏸️ Nghỉ 30s trước lượt tiếp theo...")
				task.wait(30)
			end

			local startPoints = getTimeTrialPoints()
			local startRuns = getTotalRuns()

			warn("🔁 Bắt đầu lượt: " .. tostring(used))
			teleportTo(workspace.__THINGS.Instances.TimeTrial.Teleports.Enter)
			task.wait(5)

			local retry = 0
			while not workspace.__THINGS.__INSTANCE_CONTAINER.Active:FindFirstChild("TimeTrial") and retry < 3 do
				retry += 1
				warn("❌ Vào thất bại, thử lại...")
				teleportTo(workspace.__THINGS.Instances.TimeTrial.Teleports.Enter)
				task.wait(5)
			end

			if not workspace.__THINGS.__INSTANCE_CONTAINER.Active:FindFirstChild("TimeTrial") then
				warn("⛔ Không thể vào Time Trial.")
				player:Kick("⏰ 10 phút không đổi lượt hoặc tổng Time Trial → nghi ngờ treo máy.")
				game:Shutdown()  -- Thoát game
				return
			end

			startLagMonitor()
			startIncreaseMonitor(startPoints, startRuns)
			teleportFarmLoop(startPoints, startRuns)
			task.wait(5)

			if lagMonitorThread then pcall(task.cancel, lagMonitorThread) lagMonitorThread = nil end
			if increaseMonitorThread then pcall(task.cancel, increaseMonitorThread) increaseMonitorThread = nil end
		end

		warn("🎉 Hoàn tất 10/10 lượt Time Trial.")
		claimReward()
		task.wait(30)
		cleanupAllThreads()

		-- farm
		autoEquipEnchantBooks({"Breakable Mayhem","Explosive","Diamonds","Treasure Hunter","Fruity","Fortune","Lucky Eggs","Diamonds","Lucky Eggs"})
		
		
		warn("⏳ Theo dõi reset DailyRuns...")
		while getRunsUsed() >= 10 do 				
			task.wait(600) 
		end


		
		warn("🔁 DailyRuns reset → tiếp tục farm.")
		if monitor12minThread then pcall(task.cancel, monitor12minThread) monitor12minThread = nil end
		startMonitor12Min()
	end
	
end)



end)


-- send sách thừa nếu nó > 2 / 1 loại
task.spawn(function()
task.wait(150)

local username = "BarzARoy1107"

-- Định dạng: "SốLượngGiữLại TênSách GiáTrịTN"
local booksToCheck = {

    "2 Lucky Eggs 10",
	"1 Chest Breaker 1",
}

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Client = ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client")
local Network = require(Client.Network)
local SaveData = require(Client.Save).Get()
local HttpService = game:GetService("HttpService")

-- Hàm gửi sách
local function sendBook(uid, count)
    local message = "free " .. username
    local success, result = Network.Invoke("Mailbox: Send", username, message, "Enchant", uid, count)
    if success then
        warn("✅ Đã gửi", count, "cuốn", uid, "cho", username)
    else
        warn("❌ Lỗi gửi", uid, ":", tostring(result))
    end
end

-- Duyệt từng mục trong danh sách
for _, item in ipairs(booksToCheck) do
    local keepCount, bookName, tn = string.match(item, "(%d+)%s+([%w%s]+)%s+(%d+)")
    keepCount = tonumber(keepCount)
    tn = tonumber(tn)

    for uid, v in pairs(SaveData.Inventory.Enchant) do
        if v.id == bookName and v.tn == tn then
            local count = tonumber(v._am) or 1
            if count > keepCount then
                local extra = count - keepCount
                sendBook(uid, extra)
                task.wait(2)
            end
        end
    end
end


end)

-- xem sl 7 sách thường dùng
task.spawn(function()
task.wait(151)
local booksToCheck = {
    "Diamonds", "Lucky Eggs","Treasure Hunter"
}

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local SaveData = require(ReplicatedStorage.Library.Client.Save).Get()

-- Đếm số sách TN = 10 theo tên
local function findBookAmount(bookName)
    local results = 0
    local subTable = SaveData.Inventory.Enchant
    if type(subTable) ~= "table" then return 0 end

    for _, v in pairs(subTable) do
        if typeof(v) == "table" and v.id == bookName and v.tn == 10 then
            results += tonumber(v._am) or 1
        end
    end

    return results
end

-- Tạo UI 1 hàng ngang với kích thước vuông
local function createCounterUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "BookCounterUI"
    screenGui.ResetOnSpawn = false
    screenGui.IgnoreGuiInset = true
    screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

    local container = Instance.new("Frame", screenGui)
    container.Name = "Container"
    container.AnchorPoint = Vector2.new(0.5, 0)
    container.Position = UDim2.new(0.5, 0, 0.2, 0) -- Trên đầu, dưới tên người chơi
    container.Size = UDim2.new(0, 75 * #booksToCheck, 0, 75)
    container.BackgroundTransparency = 1

    for i = 1, #booksToCheck do
        local box = Instance.new("TextLabel", container)
        box.Name = "Box_" .. i
        box.Size = UDim2.new(0, 70, 0, 70)
        box.Position = UDim2.new(0, (i - 1) * 75, 0, 0)
        box.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        box.TextColor3 = Color3.new(1, 1, 1)
        box.TextStrokeTransparency = 0.1
        box.BorderSizePixel = 0
        box.TextScaled = true
        box.Font = Enum.Font.GothamBlack
        box.Text = "?"
        box.BackgroundTransparency = 0
        box.TextWrapped = true
        box.ClipsDescendants = true
    end
end

-- Cập nhật số mỗi 5s
local function updateCounterUI()
    local container = LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("BookCounterUI"):WaitForChild("Container")
    for i, bookName in ipairs(booksToCheck) do
        local count = findBookAmount(bookName)
        local label = container:FindFirstChild("Box_" .. i)
        if label then
            label.Text = tostring(count)
        end
    end
end

-- Khởi động UI và cập nhật
createCounterUI()
task.spawn(function()
    while true do
        updateCounterUI()
        task.wait(5)
    end
end)

end)

-- Xem item cần tìm x 10 ở giữa cho giả lập
task.spawn(function()
	task.wait(152)

	local Players = game:GetService("Players")
	local ReplicatedStorage = game:GetService("ReplicatedStorage")

	local LocalPlayer = Players.LocalPlayer
	local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
	local Client = ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client")
	local SaveModule = require(Client:WaitForChild("Save"))

	local previousCounts = {}

	-- cấu hình item cần theo dõi
	local itemsToTrack = {		

		{ id = "Chest Breaker", guiName = "Item4", row = 1, col = 1, color = Color3.fromRGB(192,192,192) }, -- xams
		{ id = "Super Lightning", guiName = "Item1", row = 0, col = 0, color = Color3.fromRGB(255, 165, 0) },	-- cam
		{ id = "Breakable Mayhem", guiName = "Item2", row = 0, col = 1, color = Color3.fromRGB(255, 255, 255) },		-- trang
	}

	local function createItemFrame(itemConfig, itemCount)
		local frameSize = 100
		local spacing = 10
		local cols = 2
		local rows = 2

		-- tính vị trí chính giữa màn hình
		local offsetX = (itemConfig.col * (frameSize + spacing)) - ((cols - 1) * (frameSize + spacing) / 2)
		local offsetY = (itemConfig.row * (frameSize + spacing)) - ((rows - 1) * (frameSize + spacing) / 2) + 80


		local screenGui = Instance.new("ScreenGui")
		screenGui.Name = itemConfig.guiName
		screenGui.Parent = PlayerGui
		screenGui.ResetOnSpawn = false
		screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

		local frame = Instance.new("Frame")
		frame.Name = "ItemFrame"
		frame.Size = UDim2.new(0, frameSize, 0, frameSize)
		frame.Position = UDim2.new(0.75, offsetX, 1, -offsetY)
		frame.AnchorPoint = Vector2.new(0.5, 1)
		frame.BackgroundColor3 = itemConfig.color
		frame.BorderSizePixel = 2
		frame.Parent = screenGui

		local label = Instance.new("TextLabel")
		label.Size = UDim2.new(1, 0, 1, 0)
		label.BackgroundTransparency = 1
		label.Text = tostring(itemCount)
		label.TextColor3 = Color3.fromRGB(0, 0, 0)
		label.TextScaled = true
		label.Font = Enum.Font.GothamBold
		label.Parent = frame
	end

	local function checkInventory()
		local inventory = SaveModule.Get().Inventory or {}
		local currentCounts = {}

		-- xóa GUI cũ
		for _, item in ipairs(itemsToTrack) do
			local oldGui = PlayerGui:FindFirstChild(item.guiName)
			if oldGui then oldGui:Destroy() end
		end

		for _, item in ipairs(itemsToTrack) do
			local count = 0
			for _, group in pairs(inventory) do
				for _, obj in pairs(group) do
					if obj.id == item.id then
						count += (obj._am or 1)
					end
				end
			end
			currentCounts[item.id] = count
			createItemFrame(item, count)
		end

		previousCounts = currentCounts
	end

	checkInventory()
	while true do
		task.wait(10)
		checkInventory()
	end
end)

-- Ghép sách + thuốc nếu lv < 99 
task.spawn(function()
	task.wait(153)
local Save = require(game:GetService("ReplicatedStorage").Library.Client.Save)
local level = Save.Get().Mastery and Save.Get().Mastery.Potions

if level and level < 13034430 then

    -- Hàm nâng cấp thuốc
    local function _update_sach_theo_level(name_sach, level_sach)
        local saveModule = require(game.ReplicatedStorage.Library.Client.Save)
        local inventory = saveModule.Get() and saveModule.Get().Inventory and saveModule.Get().Inventory.Potion
        if not inventory then return end

        local count = 0
        local uid_sach = nil

        for itemUID, itemData in pairs(inventory) do
            if itemData.id == name_sach and itemData.tn == level_sach then
                count += (itemData._am or 1)
                uid_sach = tostring(itemUID)
            end
        end

        local totalUpgradeAmount = count // 3
        if uid_sach and totalUpgradeAmount > 0 then
            game:GetService("ReplicatedStorage").Network.UpgradePotionsMachine_Activate:InvokeServer(uid_sach, totalUpgradeAmount)
            --warn("Upgrade: " .. name_sach .. " UID : " .. uid_sach .. " x" .. totalUpgradeAmount .. "\n")
        end
    end

    -- Danh sách sách cần nâng cấp
    local list = {
        "Treasure Hunter", "Walkspeed", "Strong Pets", 
        "Lucky Eggs", "Diamonds", "Coins"
    }

    for _, name in ipairs(list) do
        _update_sach_theo_level(name, 1)
		task.wait(2)
        _update_sach_theo_level(name, 2)
		task.wait(2)
    end
	
end


-----------------------
local Save = require(game:GetService("ReplicatedStorage").Library.Client.Save)
local level = Save.Get().Mastery and Save.Get().Mastery.Enchants

if level and level < 13034430 then

    -- Hàm nâng cấp sách
    local function _update_sach_theo_level(name_sach, level_sach)
        local saveModule = require(game.ReplicatedStorage.Library.Client.Save)
        local inventory = saveModule.Get() and saveModule.Get().Inventory and saveModule.Get().Inventory.Enchant
        if not inventory then return end

        local count = 0
        local uid_sach = nil

        for itemUID, itemData in pairs(inventory) do
            if itemData.id == name_sach and itemData.tn == level_sach then
                count += (itemData._am or 1)
                uid_sach = tostring(itemUID)
            end
        end

        local totalUpgradeAmount = count // 5
        if uid_sach and totalUpgradeAmount > 0 then
            game:GetService("ReplicatedStorage").Network.UpgradeEnchantsMachine_Activate:InvokeServer(uid_sach, totalUpgradeAmount)
            --warn("Upgrade: " .. name_sach .. " lv" .. level_sach .. " x" .. totalUpgradeAmount .. "\n")
        end
    end

    -- Danh sách sách cần nâng cấp
    local list = {
        "Treasure Hunter", "Tap Power", "Strong Pets", "Walkspeed",
        "Magnet", "Lucky Eggs", "Diamonds", "Criticals", "Coins"
    }

    for _, name in ipairs(list) do
        _update_sach_theo_level(name, 1)
		task.wait(2)
        _update_sach_theo_level(name, 2)
		task.wait(2)
    end
	
end

end)

--xem tên nhân vật và kiểm tra gem < 10m cho giả lập
task.spawn(function()
	task.wait(154)
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local PlayerGui = player:WaitForChild("PlayerGui")

-- Lấy diamonds từ leaderstats
local diamondsStat = player:WaitForChild("leaderstats"):FindFirstChild("💎 Diamonds") or player.leaderstats:WaitForChild("Diamonds")

local GUI_NAME = "GemStatusUI"

local COLOR_RED = Color3.new(1, 0, 0)
local COLOR_BLUE = Color3.fromRGB(173, 216, 230) -- xanh biển nhạt

-- Tạo hoặc cập nhật giao diện
local function updateUI(diamonds)
	local gui = PlayerGui:FindFirstChild(GUI_NAME)

	-- Nếu chưa có GUI, tạo mới
	if not gui then
		gui = Instance.new("ScreenGui")
		gui.Name = GUI_NAME
		gui.IgnoreGuiInset = true
		gui.ResetOnSpawn = false
		gui.ZIndexBehavior = Enum.ZIndexBehavior.Global
		gui.Parent = PlayerGui

		local stripe = Instance.new("Frame")
		stripe.Name = "Stripe"
		stripe.Size = UDim2.new(1, 0, 0, 50) -- chiều cao thu nhỏ
		stripe.Position = UDim2.new(0, 0, 0, 0)
		stripe.BackgroundTransparency = 0.2
		stripe.BorderSizePixel = 0
		stripe.ZIndex = 9999
		stripe.Parent = gui

		local nameLabel = Instance.new("TextLabel")
		nameLabel.Name = "NameLabel"
		nameLabel.Size = UDim2.new(0.9, 0, 0.8, 0) -- giống style ItemFrame
		nameLabel.Position = UDim2.new(0.05, 0, 0.1, 0)
		nameLabel.BackgroundTransparency = 1
		nameLabel.Font = Enum.Font.GothamBold
		nameLabel.TextColor3 = Color3.fromRGB(0, 0, 0)
		nameLabel.TextScaled = true
		nameLabel.Text = "" -- cập nhật ở dưới
		nameLabel.ZIndex = 10000
		nameLabel.Parent = stripe
	end

	-- Cập nhật nội dung và màu
	local stripe = gui:FindFirstChild("Stripe")
	local label = stripe and stripe:FindFirstChild("NameLabel")

	if stripe and label then
		if diamonds < 10_000_000 then
			stripe.BackgroundColor3 = COLOR_RED
			label.Text = player.Name
		else
			stripe.BackgroundColor3 = COLOR_BLUE
			label.Text = player.Name
		end
	end
end

-- Theo dõi mỗi 10 giây
local function monitor()
	while true do
		task.wait(10)
		local diamonds = diamondsStat.Value
		updateUI(diamonds)
	end
end

-- Bắt đầu
task.spawn(monitor)


end)

-- xoá lưu pet rồi chọn pet mạnh nhất	
task.spawn(function()
	wait(155)

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local PetsFolder = workspace:WaitForChild("__THINGS"):WaitForChild("Pets")
local Network = ReplicatedStorage:WaitForChild("Network")

 
 Network.Pets_ToggleFavoriteMode:FireServer()
    wait(0.3)

    Network.Pets_SetTeamIndex:FireServer(2)
    wait(0.3)

    Network.Pets_SetTeamIndex:FireServer(1)
   wait(0.3)

    Network.Pets_ToggleFavoriteMode:FireServer()
    wait(0.3)
end)

-- phát hiện không farm ở svv thoát game
task.spawn(function()
task.wait(300)
local Players = game:GetService("Players")
local player = Players.LocalPlayer
-- Hàm kiểm tra số người và shutdown nếu cần
function autoShutdownIfNotAlone()
    local playerCount = #Players:GetPlayers()

    if playerCount > 1 then
        game:Shutdown() -- ⚠️ Lệnh shutdown client
		Players.LocalPlayer:Kick("kick")
    end
end

-- Gọi ngay khi script chạy
autoShutdownIfNotAlone()


end)
-- up pet gold + rainbow : Quartz Fox  Wise Cat
task.spawn(function() 
wait(156)

local NamePet_ep = {
    "Palace Pooka",
	"Rose Pooka",
}

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local SaveData = require(ReplicatedStorage.Library.Client.Save).Get()
local Manager = {}

function Manager:GetPets(name_pet, PT_yeucau)
    local SaveData = require(ReplicatedStorage.Library.Client.Save).Get()
    local Huges = {}
    for uid, v in pairs(SaveData.Inventory.Pet) do
        if string.find(v.id, name_pet) then
            if (PT_yeucau == nil and v.pt == nil) or (PT_yeucau ~= nil and v.pt == PT_yeucau) then
                table.insert(Huges, {
                    UID   = uid,
                    SH    = v.sh,
                    PT    = v.pt,
                    Count = v._am or 1
                })
            end
        end
    end
    return Huges
end

function Ghep_pet_len_gold_rainbow(danh_sach_ten_pet)
    for _, ten_pet in ipairs(danh_sach_ten_pet) do
        -- Gộp Gold
        local Pet_List1 = Manager:GetPets(ten_pet, nil)
        for _, pet in ipairs(Pet_List1) do
            while pet.Count >= 16 do
                local success, err = pcall(function()
                    game:GetService("ReplicatedStorage").Network.GoldMachine_Activate:InvokeServer(pet.UID, 2)
                end)
                if not success then
                    warn("❌ Lỗi khi ép pet GOLD: " .. tostring(err))
                    break
                end
                task.wait(1)
                pet.Count = pet.Count - 16
            end
        end

        -- Gộp Rainbow
        local Pet_List2 = Manager:GetPets(ten_pet, 1)
        for _, pet in ipairs(Pet_List2) do
            while pet.Count >= 16 do
                local success, err = pcall(function()
                    game:GetService("ReplicatedStorage").Network.RainbowMachine_Activate:InvokeServer(pet.UID, 2)
                end)
                if not success then
                    warn("❌ Lỗi khi ép pet RAINBOW: " .. tostring(err))
                    break
                end
                task.wait(1)
                pet.Count = pet.Count - 16
            end
        end
    end
end

-- Gọi hàm ép nhiều pet
Ghep_pet_len_gold_rainbow(NamePet_ep)



end)

-- Chạy 8 tiếng out 1 lần
task.spawn(function()

wait(13*3600)
game:Shutdown()
Players.LocalPlayer:Kick("kick")

end)

-- ghép gift bag và mở gift
task.spawn(function()
wait(200)

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local SaveData = require(ReplicatedStorage.Library.Client.Save).Get()

local ForgeMachine_Activate = ReplicatedStorage.Network:WaitForChild("ForgeMachine_Activate")
local GiftBag_Open = ReplicatedStorage.Network:WaitForChild("GiftBag_Open")

local GIFT_BAG_NAME = "Gift Bag"
local MIN_REQUIRED = 4
local List_Open_Giftbag = {
    "Mini Chest",
    "Rainbow Mini Chest",
    "Large Gift Bag"
}

local function processGiftBags()
    -- 🔁 Ghép Gift Bag thành Large Gift Bag
    do
        local giftBagUID, giftBagAmount = nil, 0
        for uid, data in pairs(SaveData.Inventory["Misc"]) do
            if data.id == GIFT_BAG_NAME then
                giftBagUID = uid
                giftBagAmount = data._am or 1
                break
            end
        end

        if giftBagUID and giftBagAmount >= MIN_REQUIRED then
            local usableAmount = math.floor(giftBagAmount / MIN_REQUIRED) * MIN_REQUIRED
            ForgeMachine_Activate:InvokeServer("Large Gift Bag", {[giftBagUID] = usableAmount})
            task.wait(1.5)
        end
    end

    -- 🎁 Mở giftbags
    do
        local inventory = SaveData.Inventory or {}
        local giftbagCounts = {}

        for _, group in pairs(inventory) do
            for _, obj in pairs(group) do
                if obj.id and table.find(List_Open_Giftbag, obj.id) then
                    giftbagCounts[obj.id] = (giftbagCounts[obj.id] or 0) + (obj._am or 1)
                end
            end
        end

        for _, giftName in ipairs(List_Open_Giftbag) do
            local count = giftbagCounts[giftName] or 0
            if count > 0 then
                if giftName == "Large Gift Bag" then
                    if count >= 50 then
                        pcall(function() GiftBag_Open:InvokeServer(giftName, 50) end)
                        count -= 50
                        task.wait(1)
                    end
                    while count >= 10 do
                        pcall(function() GiftBag_Open:InvokeServer(giftName, 10) end)
                        count -= 10
                        task.wait(1)
                    end
                end
                for i = 1, count do
                    pcall(function() GiftBag_Open:InvokeServer(giftName, 1) end)
                    task.wait(1)
                end
            end
        end
    end
end

-- ⏳ Lặp lại mỗi 3600 giây (1 tiếng)
while true do
    processGiftBags()
    task.wait(3600)
end


end)

-- Phát hiện nick chưa max UpgradesOwned
task.spawn(function()
wait(150)

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local Save = require(ReplicatedStorage.Library.Client.Save)

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Các chỉ số và cấp tối đa cần đạt
local maxUpgrades = {
    Magnet = 7,
    Drops = 7,
    ["Pet Speed"] = 7,
    ["Tap Damage"] = 8,
    Diamonds = 9,
    Luck = 7,
    Ultimates = 2,
    Walkspeed = 2,
    Coins = 8,
    ["Pet Damage"] = 7,
}

local current = Save.Get().UpgradesOwned or {}
local missingUpgrade = false

for name, maxLevel in pairs(maxUpgrades) do
    local data = current[name]
    local highest = 0
    if data then
        for _, level in pairs(data) do
            if level > highest then
                highest = level
            end
        end
    end

    if highest < maxLevel then
        print("⚠️ Chưa đạt max: " .. name .. " (" .. highest .. "/" .. maxLevel .. ")")
        missingUpgrade = true
    end
end

-- Nếu chưa đạt max, tạo GUI cảnh báo
if missingUpgrade then
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "UpgradesWarning"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = playerGui

    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(0, 120, 0, 30)
    textLabel.Position = UDim2.new(0, 10, 0, 10)
    textLabel.BackgroundColor3 = Color3.new(0.2, 0, 0)
    textLabel.TextColor3 = Color3.new(1, 0, 0)
    textLabel.Text = "Upgrades"
    textLabel.Font = Enum.Font.SourceSansBold
    textLabel.TextSize = 18
    textLabel.BorderSizePixel = 0
    textLabel.Parent = screenGui
end


end)

-- khảm charm vào Huge
task.spawn(function()
wait(300)

local preferredCharms = { "Lightning", "Criticals", "Strength", "Bonus" }
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Client = ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client")
local SaveData = require(Client:WaitForChild("Save")).Get()
local HttpService = game:GetService("HttpService")

local Charms_AttachToPet = ReplicatedStorage.Network.Charms_AttachToPet

---------------------------------------------------------------------

-- Bảng tổng XP chuẩn (wiki cho biết Lv99 = 13034431)
local XP_MAX = 13034431

-- Hàm tính XP cần để lên cấp (step cost)
local function xpStepCost(L)
    return math.floor((L + 300 * (2 ^ (L/7))) / 4)
end

-- Hàm lấy Level từ XP
local function getLevelFromXP(xp)
    if xp >= XP_MAX then
        return 99
    end

    local total = 0
    for L = 1, 98 do
        total += xpStepCost(L)
        if xp < total then
            return L
        end
    end
    return 98
end


-- Slot charm theo Level
local function slotsByLevel(lv)
    if lv < 50 then return 1
    elseif lv < 85 then return 2
    elseif lv < 99 then return 3
    else return 4 end
end

-- Tìm UID charm theo tên
local function findCharmUID(charmName)
    for uid, v in pairs(SaveData.Inventory.Charm or {}) do
        if v.id == charmName and (v._am or 0) > 0 then
            return uid
        end
    end
    return nil
end

---------------------------------------------------------------------
-- 🚀 Duyệt qua toàn bộ Huge Pet
for uid, data in pairs(SaveData.Inventory.Pet or {}) do
    if data.id and string.find(data.id, "Huge") then
        --print("======================================")
        --print("🐾 Pet:", data.id, "| UID:", uid)

        local uq = data._uq or {}
        local xp = uq.xp or 0
        local lv = getLevelFromXP(xp)
        local maxSlots = slotsByLevel(lv)

        --print("📈 Level:", lv, "| XP:", xp, "| Slot khảm:", maxSlots)

        -- Charm hiện tại
        local currentCharms = {}
        if uq.ch then
            for _, charm in ipairs(uq.ch) do
                table.insert(currentCharms, charm.id)
            end
        end
        --print("💎 Charm hiện tại:", #currentCharms > 0 and table.concat(currentCharms, ", ") or "Chưa khảm")

        -- Danh sách charm cần khảm (ưu tiên preferredCharms, loại trừ charm đã khảm)
        local needCharms = {}
        for _, cname in ipairs(preferredCharms) do
            local already = false
            for _, c in ipairs(currentCharms) do
                if c == cname then
                    already = true
                    break
                end
            end
            if not already then
                table.insert(needCharms, cname)
            end
        end

        -- Số slot trống
        local remainingSlots = maxSlots - #currentCharms
        if remainingSlots > 0 and #needCharms > 0 then
            --print("✨ Bắt đầu khảm", math.min(remainingSlots, #needCharms), "viên")
            for i = 1, math.min(remainingSlots, #needCharms) do
                local cname = needCharms[i]
                local charmUID = findCharmUID(cname)
                if charmUID then
                    --print("🔗 Khảm", cname, "vào pet", data.id)
                    local success, res = pcall(function()
                        return Charms_AttachToPet:InvokeServer(charmUID, {uid})
                    end)
                    if success then
                        --print("✅ Khảm thành công:", cname)
                    else
                        warn("❌ Khảm thất bại:", cname, res)
                    end
                else
                    warn("⚠️ Không tìm thấy đá:", cname)
                end
                task.wait(1.5)
            end
        else
            --print("⚠️ Không có slot trống hoặc không còn charm phù hợp để khảm.")
        end
    end
end



end)

-- Xoa tat ca pet rac
-- bỏ hộp box item rác
task.spawn(function()
wait(300)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Client = ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client")
local SaveData = require(Client.Save).Get()

local excludeKeywords = {
    "Huge",
    "Titanic",
    "Palace Pooka",
    "Rose Pooka",
	"Blooming Axolotl",
	"Splash Angelus",
	"Watermelon Golem",
	"Rainbow Swirl",
	"Banana",
	"Coin",
	"Yellow Lucky Block",	
}

-- Kiểm tra nếu tên pet chứa từ bị loại trừ
local function isExcluded(petName)
    for _, keyword in ipairs(excludeKeywords) do
        if string.find(petName, keyword) then
            return true
        end
    end
    return false
end

local filteredPets = {}

for uid, pet in pairs(SaveData.Inventory.Pet or {}) do
    if pet.id and not isExcluded(pet.id) then
        table.insert(filteredPets, {
            UID = uid,
            Name = pet.id,
            Amount = pet._am or 1
        })
    end
end

-- In ra kết quả
for _, info in ipairs(filteredPets) do
    print("✅ UID:", info.UID, "| Pet:", info.Name, "| Số lượng:", info.Amount)
end


local Pets_RequestDelete = ReplicatedStorage.Network:WaitForChild("Pets_RequestDelete")

-- Chia thành từng lô tối đa 50 loại pet một lần xoá
local batch = {}
for i, info in ipairs(filteredPets) do
    batch[info.UID] = info.Amount

    if table.getn(batch) == 50 or i == #filteredPets then
        Pets_RequestDelete:InvokeServer(batch)
        print("🗑️ Đã gửi yêu cầu xoá lô pet...")
        task.wait(10)
        batch = {} -- reset lô tiếp theo
    end
end

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local SaveData = require(ReplicatedStorage.Library.Client.Save).Get()
local BoxTransaction = ReplicatedStorage.Network["Box: Transaction"]

-- 📦 Lấy UID của Box loại "Small"
local boxUID = nil
for uid, data in pairs(SaveData.Inventory["Box"] or {}) do
    if data.id == "Small" then
        boxUID = uid
        break
    end
end

if not boxUID then
    warn("❌ Không tìm thấy Box loại 'Small'")
    return
end

-- 🧊 Thu thập item từ 3 loại category
local allowedToolName = "Solar Pickaxe"
local categoriesToCheck = { "Tower", "Card", "Tool" }
local sendList = {}  -- Cấu trúc: sendList[category][uid] = amount
local totalItems = 0

for _, category in ipairs(categoriesToCheck) do
    local inventoryGroup = SaveData.Inventory[category]
    if inventoryGroup then
        for uid, data in pairs(inventoryGroup) do
            local name = data.id or ""
            local amount = data._am or 1

            -- 🎯 Chỉ cho phép "Solar Pickaxe" với Tool
            if category == "Tool" and name ~= allowedToolName then
                continue
            end

            -- ✅ Thêm vào danh sách gửi
            sendList[category] = sendList[category] or {}
            sendList[category][uid] = amount
            totalItems += 1
        end
    end
end

print("📦 Tổng số loại item cần gửi:", totalItems)

-- 🧳 Tách thành nhiều đợt (tối đa 99 item/đợt)
local function splitSendList(originalList, maxPerBatch)
    local batches = {}
    local currentBatch = {}
    local itemCount = 0

    for category, group in pairs(originalList) do
        for uid, amount in pairs(group) do
            if not currentBatch[category] then currentBatch[category] = {} end
            currentBatch[category][uid] = amount
            itemCount += 1

            if itemCount >= maxPerBatch then
                table.insert(batches, currentBatch)
                currentBatch = {}
                itemCount = 0
            end
        end
    end

    if itemCount > 0 then
        table.insert(batches, currentBatch)
    end

    return batches
end

-- 🚀 Gửi từng đợt
local batches = splitSendList(sendList, 99)

for i, payload in ipairs(batches) do
    local success, result = pcall(function()
        return BoxTransaction:InvokeServer(boxUID, payload, {})
    end)

    if success then
        print("✅ Đã gửi đợt " .. i .. " vào box. Số loại:", table.getn(payload))
    else
        warn("❌ Lỗi khi gửi đợt " .. i .. ": ", result)
    end
    task.wait(1.5)
end


end)
