-- 1 gi·ªù check daily run time trial n·∫øu ƒë√£ ch·∫°y ƒë·ªß 10 l·∫ßn th√¨ tho√°t game ƒë·ªÉ t·ª± ch·∫°y event
task.spawn(function()
wait(100)
while true do


Save = require(game.ReplicatedStorage.Library.Client.Save)		
local function getRunsUsed()
	local saveData = Save.Get()
	return saveData and saveData.TimeTrialStats and saveData.TimeTrialStats.DailyRuns or 0
end

local Daily_run = getRunsUsed()
if Daily_run >= 10 then
		game:Shutdown() -- ‚ö†Ô∏è L·ªánh shutdown client
		Players.LocalPlayer:Kick("kick")
end

	wait(3600)
end

end)

-- map 269 time trial
task.spawn(function()
wait(150)

if _G.VAR_TIME_TRIAL then
	warn("Script ƒë√£ ƒë∆∞·ª£c ch·∫°y tr∆∞·ªõc ƒë√≥!")
	return
end

_G.VAR_TIME_TRIAL = true

-- Kh·ªüi t·∫°o GUI Time Trial
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local Save = require(game.ReplicatedStorage.Library.Client.Save)

-- X√≥a GUI c≈© n·∫øu ƒë√£ t·ªìn t·∫°i
local playerGui = player:WaitForChild("PlayerGui")
local oldGui = playerGui:FindFirstChild("TimeTrialGui")
if oldGui then oldGui:Destroy() end

-- H√†m l·∫•y l∆∞·ª£t c√≤n l·∫°i
local function getRunsLeft()
	local saveData = Save.Get()
	if saveData and saveData.TimeTrialStats then
		local usedRuns = saveData.TimeTrialStats.DailyRuns or 0
		return math.max(0, 10 - usedRuns)
	end
	return 0
end

-- H√†m l·∫•y t·ªïng l∆∞·ª£t ƒë√£ d√πng
local function getRunsUsed()
	local saveData = Save.Get()
	return saveData and saveData.TimeTrialStats and saveData.TimeTrialStats.DailyRuns or 0
end

local function getRunsTotals()
	local saveData = Save.Get()
	return saveData and saveData.TimeTrialStats and saveData.TimeTrialStats.TotalRuns or 0
end
-- H√†m l·∫•y s·ªë ƒëi·ªÉm Time Trial
local function getTimeTrialPoints()
	local saveData = Save.Get()
	if saveData and saveData.TimeTrialStats and type(saveData.TimeTrialStats.Points) == "number" then
		return saveData.TimeTrialStats.Points
	end
	return 0
end

-- T·∫°o GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "TimeTrialGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = playerGui

local function createLabel(name, position, anchor, bgColor)
	local label = Instance.new("TextLabel")
	label.Name = name
	label.AnchorPoint = anchor or Vector2.new(0, 0)
	label.Position = position
	label.Size = UDim2.new(0, 0, 0, 38)
	label.BackgroundColor3 = bgColor
	label.TextColor3 = Color3.fromRGB(255, 255, 255)
	label.Font = Enum.Font.GothamBold
	label.TextSize = 32
	label.Text = "..."
	label.BackgroundTransparency = 0
	label.BorderSizePixel = 0
	label.TextXAlignment = Enum.TextXAlignment.Center
	label.Parent = screenGui
	return label
end

-- üß≠ T·∫°o label: Points (tr√°i tr√™n), TimeTrial (gi·ªØa tr√™n)
local pointsLabel = createLabel("PointsLabel", UDim2.new(0.7, 0, 0.1, -55), Vector2.new(0, 0), Color3.fromRGB(0, 128, 255))
local timeTrialLabel = createLabel("TimeTrialLabel", UDim2.new(0.79, 0, 0.1, -55), Vector2.new(0, 0), Color3.fromRGB(128, 0, 128))

-- C·∫≠p nh·∫≠t k√≠ch th∆∞·ªõc theo text
local function updateLabelSize(label)
	label.Size = UDim2.new(0, label.TextBounds.X + 20, 0, 38)
end

-- C·∫≠p nh·∫≠t GUI m·ªói 10 gi√¢y
task.spawn(function()
	while true do
		local runsLeft = getRunsLeft()
		local points = getTimeTrialPoints()

		pointsLabel.Text = tostring(points)
		updateLabelSize(pointsLabel)

		timeTrialLabel.Text = tostring(runsLeft)
		updateLabelSize(timeTrialLabel)

		task.wait(10)
	end
end)

-- Bi·∫øn retry n·∫øu b·ªã stuck
local _stuckRetries = 0
local stuckMonitorThread = nil

local function stopMonitorStuck()
	if stuckMonitorThread then
		task.cancel(stuckMonitorThread)
		stuckMonitorThread = nil
	end
end

-- üëÅÔ∏è‚Äçüó®Ô∏è Theo d√µi ƒë·ª©ng y√™n
local function startMonitorStuck(onStuckCallback)
	if stuckMonitorThread then
		task.cancel(stuckMonitorThread)
	end

	stuckMonitorThread = task.spawn(function()
		local stationarySeconds = 0
		local lastPosition = nil

		while true do
		
		
		
			local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
			if not hrp then task.wait(1) continue end

			local currentPosition = hrp.Position
			if lastPosition and (currentPosition - lastPosition).Magnitude < 0.5 then
				stationarySeconds += 1
				if stationarySeconds >= 60 then
					warn("‚ö†Ô∏è Nh√¢n v·∫≠t ƒë·ª©ng y√™n t·∫°i 1 v·ªã tr√≠ 60s ‚áí x·ª≠ l√Ω stuck l·∫ßn th·ª© " .. tostring(_stuckRetries + 1))
					stopMonitorStuck()

					_stuckRetries += 1
					if _stuckRetries >= 3 then
						player:Kick("ƒê·ª©ng y√™n qu√° 60s trong Time Trial (ƒë√£ th·ª≠ l·∫°i 3 l·∫ßn)")
					else
						if workspace.__THINGS.Instances.TimeTrial.Teleports.Leave then
							teleportTo(workspace.__THINGS.Instances.TimeTrial.Teleports.Leave)
							task.wait(15)
							if onStuckCallback then
								onStuckCallback()
							end
						end
					end
					break
				end
			else
				stationarySeconds = 0
				lastPosition = currentPosition
			end

			task.wait(1)
		end
	end)
end
local function RunTimeTrialScript()
	task.spawn(function()
		if game.PlaceId ~= 140403681187145 then return end

		local ZoneCmds = require(game.ReplicatedStorage.Library.Client.ZoneCmds)
		local BreakablesFolder = workspace.__THINGS.Breakables
		local EnterTeleport = workspace.__THINGS.Instances.TimeTrial.Teleports.Enter
		local LeaveTeleport = workspace.__THINGS.Instances.TimeTrial.Teleports.Leave

		local function teleportTo(part)
			if part and part.CFrame then
				local character = player.Character or player.CharacterAdded:Wait()
				if character and character:FindFirstChild("HumanoidRootPart") then
					character.HumanoidRootPart.CFrame = part.CFrame + Vector3.new(0, 5, 0)
				end
			end
		end

		local function isValidBreakable(instance)
			return instance:IsA("Model") and tonumber(instance.Name) ~= nil
		end

		local function getCurrentBreakables()
			local list = {}
			for _, child in ipairs(BreakablesFolder:GetChildren()) do
				if isValidBreakable(child) then
					table.insert(list, child.Name)
				end
			end
			return list
		end

		local function waitUntilBreakableGone(name)
			while true do
				local breakable = BreakablesFolder:FindFirstChild(name)
				if not breakable then break end
				task.wait(0.1)
			end
		end

		local function teleportToBreakables()
			
			m=0
			while true do

			
			
			
			
			
				local breakableNames = getCurrentBreakables()
				if #breakableNames > 0 then
					for _, name in ipairs(breakableNames) do
						local breakable = BreakablesFolder:FindFirstChild(name)
						if breakable and breakable:IsA("Model") then
							local part = breakable:FindFirstChildWhichIsA("BasePart")
							if part then
								teleportTo(part)
								waitUntilBreakableGone(name)
							end
						end
					end
				else
					local hasNew = false
					for i = 1, 20 do
						task.wait(1)
						if #getCurrentBreakables() > 0 then
							hasNew = true
							break
						end
					end

					if not hasNew then
						if LeaveTeleport then
							teleportTo(LeaveTeleport)
							task.wait(5)
							wasTeleportedOut = true
						end
						break
					end
				end
				task.wait(0.5)
			end
		end

		local savedPosition = nil
		local wasTeleportedOut = false

		local _, maxZoneData = ZoneCmds.GetMaxOwnedZone()
		local requiredZoneNumber = maxZoneData and maxZoneData.ZoneNumber or 0

		local function waitUntilReachZone(targetZone)
			while true do
				local _, currentZoneData = ZoneCmds.GetMaxOwnedZone()
				if currentZoneData and currentZoneData.ZoneNumber >= targetZone then
					print("‚úÖ ƒê√£ ƒë·∫°t Zone " .. targetZone .. ", b·∫Øt ƒë·∫ßu ch·∫°y Time Trial.")
					break
				end
				print("‚è≥ Ch∆∞a ƒë·∫°t Zone " .. targetZone .. ", ƒëang ƒë·ª£i...")
				task.wait(5)
			end
		end

		waitUntilReachZone(requiredZoneNumber)

		-- üéØ Theo d√µi 12 ph√∫t kh√¥ng gi·∫£m l∆∞·ª£t
		task.spawn(function()
			local currentRuns = getRunsUsed()
			local total_RUN = getRunsTotals()
			
			print("üìä S·ªë l∆∞·ª£t Time Trial ƒë√£ d√πng: " .. currentRuns)

			if currentRuns >= 10 then
				warn("üéØ ƒê√£ d√πng ƒë·ªß 10 l∆∞·ª£t, kh√¥ng c·∫ßn theo d√µi th√™m.")
				return
			end

			while currentRuns < 10 do
				local old_total_RUN = total_RUN
				local startRuns = currentRuns
				local totalTime = 0

				print("üïí Theo d√µi 12 ph√∫t k·ªÉ t·ª´ l∆∞·ª£t: " .. startRuns)

				while totalTime < 686 do
					task.wait(10)
					totalTime += 10

					currentRuns = getRunsUsed()
					total_RUN = getRunsTotals()
					
					if currentRuns >= 10 then
						warn("üéâ ƒê√£ ƒë·∫°t 10 l∆∞·ª£t trong khi theo d√µi.")
						return
					elseif currentRuns > startRuns then
						print("‚úÖ ƒê√£ d√πng th√™m l∆∞·ª£t (tƒÉng t·ª´ " .. startRuns .. " ‚Üí " .. currentRuns .. "), theo d√µi l·∫°i t·ª´ ƒë·∫ßu.")
						break
					end
				end

				if total_RUN == old_total_RUN then
					player:Kick("‚è∞ 12 ph√∫t r·ªìi m√† kh√¥ng tƒÉng l∆∞·ª£t Time Trial. C√≥ th·ªÉ b·ªã AFK ho·∫∑c l·ªói.")
					return
				end	
				
			end
		end)
		
			local ReplicatedStorage = game:GetService("ReplicatedStorage")
			local Client = ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client")
			local SaveModule = require(Client:WaitForChild("Save"))

			local FantasyCoins = "FantasyCoins"  -- ƒê·∫£m b·∫£o r·∫±ng "FantasyCoins" l√† chu·ªói

			local function getCurrencyAmount()

				local Inventory = SaveModule.Get().Inventory
				-- Ki·ªÉm tra n·∫øu Currency t·ªìn t·∫°i v√† c√≥ d·ªØ li·ªáu
				if Inventory and Inventory.Currency then
					for _, v in pairs(Inventory.Currency) do 
						if v.id == FantasyCoins then
							return v._am or 0  -- Tr·∫£ v·ªÅ gi√° tr·ªã _am n·∫øu c√≥, n·∫øu kh√¥ng tr·∫£ v·ªÅ 0
						end
					end
				end
				return 0
			end
			old_coin_fantasy = getCurrencyAmount()
			warn(old_coin_fantasy)	
		
		while true do
			local Daily_run = getRunsUsed()
			if Daily_run >= 10 then
				warn("üéØ ƒê√£ ƒë·ªß 10 l∆∞·ª£t ch·∫°y, d·ª´ng script.")
				break
			end
			
			------------------------------------------------------------------------
			local Save = require(game.ReplicatedStorage.Library.Client.Save)
			local saveData = Save.Get()
			local totalPoints = saveData and saveData.TimeTrialStats and (saveData.TimeTrialStats.Points or 0) or 0
			local character = player.Character or player.CharacterAdded:Wait()
			
			if totalPoints > 5000 then
				character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(-15115.5 , 20 , 1380.3))
				wait(1)
				local ReplicatedStorage = game:GetService("ReplicatedStorage")
				local FantasyKey_Unlock = game:GetService("ReplicatedStorage").Network.TimeTrials_OpenChest 
				FantasyKey_Unlock:InvokeServer(3)
				wait(1)
			end
			------------------------------------------------------------------------
			
			
			warn("üîÅ B·∫Øt ƒë·∫ßu v√≤ng Time Trial, l∆∞·ª£t hi·ªán t·∫°i: " .. tostring(Daily_run))

			local character = player.Character or player.CharacterAdded:Wait()
			local hrp = character:FindFirstChild("HumanoidRootPart")
			if hrp then
				savedPosition = hrp.CFrame
			end

			teleportTo(EnterTeleport)
			task.wait(5)
			warn("üö™ ƒê√£ teleport v√†o Time Trial, ƒëang chu·∫©n b·ªã farm...")

			wasTeleportedOut = false -- Reset c·ªù

			startMonitorStuck(function()
				-- Callback n·∫øu b·ªã stuck ‚Üí th·ª≠ l·∫°i
				warn("üîÅ Th·ª≠ l·∫°i farm sau khi ƒë·ª©ng y√™n qu√° l√¢u (retry l·∫ßn " .. tostring(_stuckRetries) .. ")")
				startMonitorStuck(function()
					warn("‚ö†Ô∏è ƒê·ª©ng y√™n ti·∫øp t·ª•c sau khi retry")
				end)
				teleportToBreakables()
				stopMonitorStuck()
			end)

			teleportToBreakables()
			stopMonitorStuck()

			task.wait(10)

			local currentRunAfter = getRunsUsed()

			if LeaveTeleport then
				teleportTo(LeaveTeleport)
				task.wait(3)
				wasTeleportedOut = true
			end

			warn("üéâ Ho√†n th√†nh Time Trial, l∆∞·ª£t ƒë√£ d√πng: " .. tostring(currentRunAfter))

			if savedPosition and not wasTeleportedOut then
				local fakePart = Instance.new("Part")
				fakePart.Anchored = true
				fakePart.CFrame = savedPosition
				fakePart.Transparency = 1
				fakePart.CanCollide = false
				fakePart.Parent = workspace
				teleportTo(fakePart)
				task.delay(1, function() fakePart:Destroy() end)
				warn("üîô Quay v·ªÅ v·ªã tr√≠ ban ƒë·∫ßu")
			end

			task.wait(15)
		end

		warn("üéâ ƒê√£ ho√†n t·∫•t Time Trial ho·∫∑c ƒë·∫°t 10 l∆∞·ª£t.")

		-- Theo d√µi reset DailyRuns ƒë·ªÉ ch·∫°y l·∫°i
		task.spawn(function()
			warn("üïì ƒêang ch·ªù DailyRuns reset ƒë·ªÉ ch·∫°y l·∫°i script...")
			while true do
				task.wait(300)
				local newRun = getRunsUsed()
				if newRun < 10 then
					warn("üîÅ DailyRuns ƒë√£ reset ‚Üí ch·∫°y l·∫°i script!")
					_G.VAR_TIME_TRIAL = nil
					RunTimeTrialScript()
					break
				else
					print("‚è≥ V·∫´n ch∆∞a reset, ch·ªù th√™m...")
				end
			end
		end)
	end)
end

-- üöÄ G·ªçi script ch√≠nh
RunTimeTrialScript()

end)

-- send s√°ch th·ª´a n·∫øu n√≥ > 2 / 1 lo·∫°i
task.spawn(function()
task.wait(60)

local username = "BarzARoy1107"
local booksToCheck = {
    "Diamonds", "Lucky Eggs","Treasure Hunter"
}

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Client = ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client")
local Network = require(Client.Network)
local SaveData = require(Client.Save).Get()
local HttpService = game:GetService("HttpService")

-- H√†m g·ª≠i s√°ch
local function sendBook(uid, count)
    local message = "free "..username
    local success, result = Network.Invoke("Mailbox: Send", username, message, "Enchant", uid, count)
    if success then
        warn("ƒê√£ g·ª≠i", count, "cu·ªën", uid, "cho", username)
    else
        warn("L·ªói g·ª≠i", uid, ":", tostring(result))
    end
end

-- L·∫∑p qua danh s√°ch
for _, bookName in ipairs(booksToCheck) do
    for uid, v in pairs(SaveData.Inventory.Enchant) do
        if v.id == bookName and v.tn == 10 then
            local count = tonumber(v._am) or 1
            if count > 2 then
                local extra = count - 2
                sendBook(uid, extra)
                task.wait(2)
            end
        end
    end
end


end)

-- xem sl 7 s√°ch th∆∞·ªùng d√πng
task.spawn(function()
task.wait(60)
local booksToCheck = {
    "Diamonds", "Lucky Eggs","Treasure Hunter"
}

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local SaveData = require(ReplicatedStorage.Library.Client.Save).Get()

-- ƒê·∫øm s·ªë s√°ch TN = 10 theo t√™n
local function findBookAmount(bookName)
    local results = 0
    local subTable = SaveData.Inventory.Enchant
    if type(subTable) ~= "table" then return 0 end

    for _, v in pairs(subTable) do
        if typeof(v) == "table" and v.id == bookName and v.tn == 10 then
            results += tonumber(v._am) or 1
        end
    end

    return results
end

-- T·∫°o UI 1 h√†ng ngang v·ªõi k√≠ch th∆∞·ªõc vu√¥ng
local function createCounterUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "BookCounterUI"
    screenGui.ResetOnSpawn = false
    screenGui.IgnoreGuiInset = true
    screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

    local container = Instance.new("Frame", screenGui)
    container.Name = "Container"
    container.AnchorPoint = Vector2.new(0.5, 0)
    container.Position = UDim2.new(0.5, 0, 0.2, 0) -- Tr√™n ƒë·∫ßu, d∆∞·ªõi t√™n ng∆∞·ªùi ch∆°i
    container.Size = UDim2.new(0, 75 * #booksToCheck, 0, 75)
    container.BackgroundTransparency = 1

    for i = 1, #booksToCheck do
        local box = Instance.new("TextLabel", container)
        box.Name = "Box_" .. i
        box.Size = UDim2.new(0, 70, 0, 70)
        box.Position = UDim2.new(0, (i - 1) * 75, 0, 0)
        box.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        box.TextColor3 = Color3.new(1, 1, 1)
        box.TextStrokeTransparency = 0.1
        box.BorderSizePixel = 0
        box.TextScaled = true
        box.Font = Enum.Font.GothamBlack
        box.Text = "?"
        box.BackgroundTransparency = 0
        box.TextWrapped = true
        box.ClipsDescendants = true
    end
end

-- C·∫≠p nh·∫≠t s·ªë m·ªói 5s
local function updateCounterUI()
    local container = LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("BookCounterUI"):WaitForChild("Container")
    for i, bookName in ipairs(booksToCheck) do
        local count = findBookAmount(bookName)
        local label = container:FindFirstChild("Box_" .. i)
        if label then
            label.Text = tostring(count)
        end
    end
end

-- Kh·ªüi ƒë·ªông UI v√† c·∫≠p nh·∫≠t
createCounterUI()
task.spawn(function()
    while true do
        updateCounterUI()
        task.wait(5)
    end
end)

end)

-- Xem item c·∫ßn t√¨m x 10 ·ªü gi·ªØa cho gi·∫£ l·∫≠p
task.spawn(function()
	task.wait(1)

	local Players = game:GetService("Players")
	local ReplicatedStorage = game:GetService("ReplicatedStorage")

	local LocalPlayer = Players.LocalPlayer
	local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
	local Client = ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client")
	local SaveModule = require(Client:WaitForChild("Save"))

	local previousCounts = {}

	-- c·∫•u h√¨nh item c·∫ßn theo d√µi
	local itemsToTrack = {		
		{ id = "Ancestor Eagle", guiName = "Item1", row = 0, col = 0, color = Color3.fromRGB(255, 165, 0) },	-- cam
		{ id = "MVP Key Upper Half", guiName = "Item2", row = 0, col = 1, color = Color3.fromRGB(255, 255, 255) },		-- trang
	}

	local function createItemFrame(itemConfig, itemCount)
		local frameSize = 100
		local spacing = 10
		local cols = 2
		local rows = 2

		-- t√≠nh v·ªã tr√≠ ch√≠nh gi·ªØa m√†n h√¨nh
		local offsetX = (itemConfig.col * (frameSize + spacing)) - ((cols - 1) * (frameSize + spacing) / 2)
		local offsetY = (itemConfig.row * (frameSize + spacing)) - ((rows - 1) * (frameSize + spacing) / 2) + 80


		local screenGui = Instance.new("ScreenGui")
		screenGui.Name = itemConfig.guiName
		screenGui.Parent = PlayerGui
		screenGui.ResetOnSpawn = false
		screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

		local frame = Instance.new("Frame")
		frame.Name = "ItemFrame"
		frame.Size = UDim2.new(0, frameSize, 0, frameSize)
		frame.Position = UDim2.new(0.75, offsetX, 1, -offsetY)
		frame.AnchorPoint = Vector2.new(0.5, 1)
		frame.BackgroundColor3 = itemConfig.color
		frame.BorderSizePixel = 2
		frame.Parent = screenGui

		local label = Instance.new("TextLabel")
		label.Size = UDim2.new(1, 0, 1, 0)
		label.BackgroundTransparency = 1
		label.Text = tostring(itemCount)
		label.TextColor3 = Color3.fromRGB(0, 0, 0)
		label.TextScaled = true
		label.Font = Enum.Font.GothamBold
		label.Parent = frame
	end

	local function checkInventory()
		local inventory = SaveModule.Get().Inventory or {}
		local currentCounts = {}

		-- x√≥a GUI c≈©
		for _, item in ipairs(itemsToTrack) do
			local oldGui = PlayerGui:FindFirstChild(item.guiName)
			if oldGui then oldGui:Destroy() end
		end

		for _, item in ipairs(itemsToTrack) do
			local count = 0
			for _, group in pairs(inventory) do
				for _, obj in pairs(group) do
					if obj.id == item.id then
						count += (obj._am or 1)
					end
				end
			end
			currentCounts[item.id] = count
			createItemFrame(item, count)
		end

		previousCounts = currentCounts
	end

	checkInventory()
	while true do
		task.wait(10)
		checkInventory()
	end
end)

-- check to·∫° ƒë·ªô vs x√∫t ra khi b·ªã r∆°i
task.spawn(function()
	task.wait(150)
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

-- T·∫°o GUI hi·ªÉn th·ªã t·ªça ƒë·ªô
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")

local coordLabel = Instance.new("TextLabel")
coordLabel.Size = UDim2.new(0, 400, 0, 50)
coordLabel.Position = UDim2.new(0.5, -200, 0.5, -25) -- Gi·ªØa m√†n h√¨nh
coordLabel.BackgroundTransparency = 0.4
coordLabel.BackgroundColor3 = Color3.new(0, 0, 0)
coordLabel.TextColor3 = Color3.new(1, 1, 1)
coordLabel.TextScaled = true
coordLabel.Font = Enum.Font.SourceSansBold
coordLabel.Text = "wait..."
coordLabel.Parent = screenGui

-- C·∫≠p nh·∫≠t t·ªça ƒë·ªô nh√¢n v·∫≠t li√™n t·ª•c
RunService.RenderStepped:Connect(function()
    local character = player.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        --local pos = character.HumanoidRootPart.Position
        --coordLabel.Text = string.format(" X: %.1f | Y: %.1f | Z: %.1f", pos.X, pos.Y, pos.Z)
    else
        coordLabel.Text = "not find user!"
		game:Shutdown()  -- Tho√°t game
    end
end)


end)

-- Gh√©p s√°ch + thu·ªëc n·∫øu lv < 99 
task.spawn(function()
	task.wait(150)
local Save = require(game:GetService("ReplicatedStorage").Library.Client.Save)
local level = Save.Get().Mastery and Save.Get().Mastery.Potions

if level and level < 13034430 then

    -- H√†m n√¢ng c·∫•p thu·ªëc
    local function _update_sach_theo_level(name_sach, level_sach)
        local saveModule = require(game.ReplicatedStorage.Library.Client.Save)
        local inventory = saveModule.Get() and saveModule.Get().Inventory and saveModule.Get().Inventory.Potion
        if not inventory then return end

        local count = 0
        local uid_sach = nil

        for itemUID, itemData in pairs(inventory) do
            if itemData.id == name_sach and itemData.tn == level_sach then
                count += (itemData._am or 1)
                uid_sach = tostring(itemUID)
            end
        end

        local totalUpgradeAmount = count // 3
        if uid_sach and totalUpgradeAmount > 0 then
            game:GetService("ReplicatedStorage").Network.UpgradePotionsMachine_Activate:InvokeServer(uid_sach, totalUpgradeAmount)
            warn("Upgrade: " .. name_sach .. " UID : " .. uid_sach .. " x" .. totalUpgradeAmount .. "\n")
        end
    end

    -- Danh s√°ch s√°ch c·∫ßn n√¢ng c·∫•p
    local list = {
        "Treasure Hunter", "Walkspeed", "Strong Pets", 
        "Lucky Eggs", "Diamonds", "Coins"
    }

    for _, name in ipairs(list) do
        _update_sach_theo_level(name, 1)
		task.wait(2)
        _update_sach_theo_level(name, 2)
		task.wait(2)
    end
	
end


-----------------------
local Save = require(game:GetService("ReplicatedStorage").Library.Client.Save)
local level = Save.Get().Mastery and Save.Get().Mastery.Enchants

if level and level < 13034430 then

    -- H√†m n√¢ng c·∫•p s√°ch
    local function _update_sach_theo_level(name_sach, level_sach)
        local saveModule = require(game.ReplicatedStorage.Library.Client.Save)
        local inventory = saveModule.Get() and saveModule.Get().Inventory and saveModule.Get().Inventory.Enchant
        if not inventory then return end

        local count = 0
        local uid_sach = nil

        for itemUID, itemData in pairs(inventory) do
            if itemData.id == name_sach and itemData.tn == level_sach then
                count += (itemData._am or 1)
                uid_sach = tostring(itemUID)
            end
        end

        local totalUpgradeAmount = count // 5
        if uid_sach and totalUpgradeAmount > 0 then
            game:GetService("ReplicatedStorage").Network.UpgradeEnchantsMachine_Activate:InvokeServer(uid_sach, totalUpgradeAmount)
            warn("Upgrade: " .. name_sach .. " lv" .. level_sach .. " x" .. totalUpgradeAmount .. "\n")
        end
    end

    -- Danh s√°ch s√°ch c·∫ßn n√¢ng c·∫•p
    local list = {
        "Treasure Hunter", "Tap Power", "Strong Pets", "Walkspeed",
        "Magnet", "Lucky Eggs", "Diamonds", "Criticals", "Coins"
    }

    for _, name in ipairs(list) do
        _update_sach_theo_level(name, 1)
		task.wait(2)
        _update_sach_theo_level(name, 2)
		task.wait(2)
    end
	
end

end)

--xem t√™n nh√¢n v·∫≠t v√† ki·ªÉm tra gem < 10m cho gi·∫£ l·∫≠p
task.spawn(function()
	task.wait(125)
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local PlayerGui = player:WaitForChild("PlayerGui")

-- L·∫•y diamonds t·ª´ leaderstats
local diamondsStat = player:WaitForChild("leaderstats"):FindFirstChild("üíé Diamonds") or player.leaderstats:WaitForChild("Diamonds")

local GUI_NAME = "GemStatusUI"

local COLOR_RED = Color3.new(1, 0, 0)
local COLOR_BLUE = Color3.fromRGB(173, 216, 230) -- xanh bi·ªÉn nh·∫°t

-- T·∫°o ho·∫∑c c·∫≠p nh·∫≠t giao di·ªán
local function updateUI(diamonds)
	local gui = PlayerGui:FindFirstChild(GUI_NAME)

	-- N·∫øu ch∆∞a c√≥ GUI, t·∫°o m·ªõi
	if not gui then
		gui = Instance.new("ScreenGui")
		gui.Name = GUI_NAME
		gui.IgnoreGuiInset = true
		gui.ResetOnSpawn = false
		gui.ZIndexBehavior = Enum.ZIndexBehavior.Global
		gui.Parent = PlayerGui

		local stripe = Instance.new("Frame")
		stripe.Name = "Stripe"
		stripe.Size = UDim2.new(1, 0, 0, 50) -- chi·ªÅu cao thu nh·ªè
		stripe.Position = UDim2.new(0, 0, 0, 0)
		stripe.BackgroundTransparency = 0.2
		stripe.BorderSizePixel = 0
		stripe.ZIndex = 9999
		stripe.Parent = gui

		local nameLabel = Instance.new("TextLabel")
		nameLabel.Name = "NameLabel"
		nameLabel.Size = UDim2.new(0.9, 0, 0.8, 0) -- gi·ªëng style ItemFrame
		nameLabel.Position = UDim2.new(0.05, 0, 0.1, 0)
		nameLabel.BackgroundTransparency = 1
		nameLabel.Font = Enum.Font.GothamBold
		nameLabel.TextColor3 = Color3.fromRGB(0, 0, 0)
		nameLabel.TextScaled = true
		nameLabel.Text = "" -- c·∫≠p nh·∫≠t ·ªü d∆∞·ªõi
		nameLabel.ZIndex = 10000
		nameLabel.Parent = stripe
	end

	-- C·∫≠p nh·∫≠t n·ªôi dung v√† m√†u
	local stripe = gui:FindFirstChild("Stripe")
	local label = stripe and stripe:FindFirstChild("NameLabel")

	if stripe and label then
		if diamonds < 10_000_000 then
			stripe.BackgroundColor3 = COLOR_RED
			label.Text = player.Name
		else
			stripe.BackgroundColor3 = COLOR_BLUE
			label.Text = player.Name
		end
	end
end

-- Theo d√µi m·ªói 10 gi√¢y
local function monitor()
	while true do
		task.wait(10)
		local diamonds = diamondsStat.Value
		updateUI(diamonds)
	end
end

-- B·∫Øt ƒë·∫ßu
task.spawn(monitor)


end)

-- xo√° l∆∞u pet r·ªìi ch·ªçn pet m·∫°nh nh·∫•t	
task.spawn(function()
	task.wait(150)

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local PetsFolder = workspace:WaitForChild("__THINGS"):WaitForChild("Pets")
local Network = ReplicatedStorage:WaitForChild("Network")

 
 Network.Pets_ToggleFavoriteMode:FireServer()
    task.wait(1)

    Network.Pets_SetTeamIndex:FireServer(2)
    task.wait(2)

    Network.Pets_SetTeamIndex:FireServer(1)
    task.wait(2)

    Network.Pets_ToggleFavoriteMode:FireServer()
    task.wait(1)
end)

-- Send nh·ªØng huge rainbow v√† shiny
task.spawn(function()
wait(90)
local recipients = {"sijmongirthss","Ash3rP0w3rPanda2018","soystaylan5","dreddyewele60","1971Nowak3135","mcconchifredjeyo","ecclweltst","killedsanthi85","tamuleviazulayv","hegemangaltieri81"}

-- üí¨ Danh s√°ch l·ªùi ch√∫c
local messages = {
    "Happy Birthday %s!",
    "Hope today brings %s!",
    "Wishing you luck %s!",
    "Congrats on your %s!",
    "Give away %s!",
    "You are amazing %s"
}

-- üì¶ Load module
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Client = ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client")
local Network = require(Client.Network)
local SaveData = require(Client.Save).Get()

-- üß† Pet manager
local Manager = {}
function Manager:GetPets(name_pet)
    local Huges = {}
    for uid, v in pairs(SaveData.Inventory.Pet) do
        if string.find(v.id, name_pet) then
            -- Ki·ªÉm tra y√™u c·∫ßu c√≥ TN = 2 ho·∫∑c SH = true
            if (v.pt == 2 or v.sh == true) then
                table.insert(Huges, {
                    UID = uid,
                    SH = v.sh,
                    PT = v.pt,
                    Count = v._am or 1
                })
            end
        end
    end
    return Huges
end

-- üîç L·∫•y t·∫•t c·∫£ pet c√≥ "huge" trong t√™n v√† c√≥ TN = 2 ho·∫∑c SH = true
local listPet = Manager:GetPets("Huge")

-- N·∫øu kh√¥ng t√¨m th·∫•y pet ph√π h·ª£p
if #listPet == 0 then
    warn("‚ùå Kh√¥ng c√≥ pet n√†o ph√π h·ª£p ƒë·ªÉ g·ª≠i.")
    return
end

-- Ch·ªçn ng·∫´u nhi√™n 1 ng∆∞·ªùi nh·∫≠n trong danh s√°ch recipients
local randomRecipient = recipients[math.random(1, #recipients)]
local petMsg = string.format(messages[math.random(1, #messages)], randomRecipient)

-- Danh s√°ch l·ªói ri√™ng bi·ªát
local failedPetList = {}

-- üöÄ G·ª≠i t·∫•t c·∫£ c√°c pet t·ªõi ng∆∞·ªùi nh·∫≠n ƒë∆∞·ª£c ch·ªçn
for _, pet in ipairs(listPet) do
    local petSuccess, petErr = Network.Invoke("Mailbox: Send", randomRecipient, petMsg, "Pet", pet.UID, 1)
    task.wait(2)

    if petSuccess then
        warn("‚úÖ Pet sent to " .. randomRecipient .. " (Pet UID: " .. pet.UID .. ")")
    else
        warn("‚ùå Failed to send PET to " .. randomRecipient .. ": " .. tostring(petErr))
        table.insert(failedPetList, randomRecipient)
    end
	task.wait(36000)
end

-- Th√¥ng b√°o danh s√°ch c√°c ng∆∞·ªùi nh·∫≠n th·∫•t b·∫°i
if #failedPetList > 0 then
    warn("‚ùå Pet sending failed for: " .. table.concat(failedPetList, ", "))
else
    warn("‚úÖ All pets sent successfully!")
end


end)

-- ph√°t hi·ªán kh√¥ng farm ·ªü svv tho√°t game
task.spawn(function()
task.wait(50)
-- H√†m ki·ªÉm tra s·ªë ng∆∞·ªùi v√† shutdown n·∫øu c·∫ßn
local function autoShutdownIfNotAlone()
    local playerCount = #Players:GetPlayers()

    if playerCount > 1 then
        game:Shutdown() -- ‚ö†Ô∏è L·ªánh shutdown client
		Players.LocalPlayer:Kick("kick")
    end
end

-- G·ªçi ngay khi script ch·∫°y
autoShutdownIfNotAlone()


end)
