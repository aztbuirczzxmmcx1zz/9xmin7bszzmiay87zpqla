-- üß≠ Teleport v√†o Block Party & ƒë·∫øn v·ªã tr√≠
local hrp = game.Players.LocalPlayer.Character.HumanoidRootPart
hrp.CFrame = workspace.__THINGS.Instances.BlockParty.Teleports.Enter.CFrame + Vector3.new(0, 5, 0)
task.wait(9)

--‚öôÔ∏è D·ªãch v·ª• & Folder
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local TilesFolder = Workspace:WaitForChild("__THINGS"):WaitForChild("Tiles")
local NLibrary = game.ReplicatedStorage.Library
local EggCmds = require(NLibrary.Client.EggCmds)

-- üî¢ ƒê·∫øm t·ªïng s·ªë tile
local function getTotalTileCount()
	return #TilesFolder:GetChildren()
end

---------------- üß© LU·ªíNG 1: Mua tiles quanh plot ----------------
local function startAutoPurchase()
	local plotIndex = 1
	local radiusMax = 6
	local delayPerTile = 0.05
	local delayPerCycle = 0.05
	local PlotsInvoke = ReplicatedStorage:WaitForChild("Network"):WaitForChild("Plots_Invoke")

	local offsets = {}
	for dx = -radiusMax, radiusMax do
		for dy = -radiusMax, radiusMax do
			if not (dx == 0 and dy == 0) then
				table.insert(offsets, {dx, dy})
			end
		end
	end

	while true do
		for _, offset in ipairs(offsets) do
			local args = {plotIndex, "PurchaseTile", offset[1], offset[2]}
			pcall(function()
				PlotsInvoke:InvokeServer(unpack(args))
			end)
			task.wait(delayPerTile)
		end
		task.wait(delayPerCycle)
	end
end

---------------- üß© G·ªòP LU·ªíNG: Claim + Open + Unlock + Plant + Diamond ----------------
local function startTileHandler()
	local TilesInvoke = ReplicatedStorage:WaitForChild("Network"):WaitForChild("Tiles_Invoke")
	local TilesFire = ReplicatedStorage:WaitForChild("Network"):WaitForChild("Tiles_Fire")
	local delayPerTile = 0.05
	local delayPerCycle = 0.5

	while true do
		for _, tile in ipairs(TilesFolder:GetChildren()) do
			local tileId = tile.Name

			-- ‚úÖ Claim + Open (Tiles_Invoke)
			pcall(function() TilesInvoke:InvokeServer(tileId, "Claim") end)
			pcall(function() TilesInvoke:InvokeServer(tileId, "Open") end)

			-- ‚úÖ Claim + Unlock (Tiles_Fire)
			pcall(function() TilesFire:FireServer(tileId, "Claimed") end)
			pcall(function() TilesFire:FireServer(tileId, "Unlock") end)

			-- ‚úÖ Claim Plant[i] (1 -> 6)
			if tile:IsA("Model") or tile:IsA("Folder") then
				if tile:FindFirstChild("Plant1") then
					for i = 1, 6 do
						pcall(function()
							TilesInvoke:InvokeServer(tileId, "Claim", i)
						end)
						task.wait(0.05)
					end
				end

				-- ‚úÖ Claim Diamond
				if tile:FindFirstChild("Diamond") then
					pcall(function()
						TilesInvoke:InvokeServer(tileId, "Tile_ClaimDiamonds")
					end)
					task.wait(0.1)
				end
			end

			task.wait(delayPerTile)
		end

		task.wait(delayPerCycle)
	end
end

---------------- üß© LU·ªíNG 5: Hatch HUGE CHANCE ----------------
local currentChance = 0

local function startAutoHatchHuge()
	local tileThreshold = 150
	local MaxEggHatch = EggCmds.GetMaxHatch()
	local player = Players.LocalPlayer
	local Network = ReplicatedStorage:WaitForChild("Network")
	local CustomEggsFolder = Workspace:WaitForChild("__THINGS"):WaitForChild("CustomEggs")
	task.wait(20)

	-- ‚öôÔ∏è T·∫Øt animation m·ªü tr·ª©ng
	local successEggs, Eggs = pcall(function()
		return player:WaitForChild("PlayerScripts"):WaitForChild("Scripts"):WaitForChild("Game"):WaitForChild("Egg Opening Frontend")
	end)
	if successEggs and Eggs then
		pcall(function()
			getsenv(Eggs).PlayEggAnimation = function() return end
		end)
	end

	-- ‚úÖ R√∫t gi√° tr·ªã t·ª´ text ki·ªÉu "12x Huge Luck!"
	local function extractHugeLuckValue(text)
		local value = text:match("(%d+)x%s+Huge%s+Luck!?")
		return tonumber(value or "0")
	end

	-- üß† T√¨m tile c√≥ Huge Luck cao nh·∫•t
	local function findBestHugeTile()
		local bestTile, bestValue = nil, -1

		for _, tile in pairs(TilesFolder:GetChildren()) do
			local label = tile:FindFirstChild("Sign")
				and tile.Sign:FindFirstChild("SurfaceGui")
				and tile.Sign.SurfaceGui:FindFirstChild("Frame")
				and tile.Sign.SurfaceGui.Frame:FindFirstChild("Frame")
				and tile.Sign.SurfaceGui.Frame.Frame:FindFirstChild("TextLabel")

			if label and label:IsA("TextLabel") then
				local value = extractHugeLuckValue(label.Text)
				if value > bestValue then
					bestTile, bestValue = tile, value
				end
			end
		end

		return bestTile, bestValue
	end

	-- ü•ö T√¨m egg g·∫ßn m·ªôt tile
	local function findEggNearTile(tile)
		local closestEgg, minDistance = nil, math.huge
		for _, egg in pairs(CustomEggsFolder:GetChildren()) do
			if #egg.Name == 32 and egg:IsA("Model") and egg:FindFirstChild("Part") then
				local dist = (egg.Part.Position - tile.PrimaryPart.Position).Magnitude
				if dist < minDistance then
					closestEgg, minDistance = egg, dist
				end
			end
		end
		return closestEgg
	end

	-- üìç Teleport t·ªõi tile
	local function teleportToTile(tile)
		local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
		if hrp and tile and tile:IsA("Model") and tile.PrimaryPart then
			hrp.CFrame = tile.PrimaryPart.CFrame + Vector3.new(0, 5, 0)
			print("üìç Teleport ƒë·∫øn tile:", tile.Name)
		end
	end

	-- üîÅ V√≤ng ch√≠nh
	while true do
		if getTotalTileCount() >= tileThreshold then
			local bestTile, bestChance = findBestHugeTile()
			if bestTile and bestChance > 0 and bestTile.PrimaryPart then
				currentChance = bestChance
				print("üéØ T√¨m th·∫•y tile Huge:", bestTile.Name, "|", bestChance .. "x")

				-- 1Ô∏è‚É£ Tele ƒë·∫øn tile
				teleportToTile(bestTile)
				task.wait(1)

				-- 2Ô∏è‚É£ T√¨m egg g·∫ßn tile
				local bestEgg = findEggNearTile(bestTile)
				if not bestEgg or not bestEgg:IsA("Model") then
					warn("‚ùå Kh√¥ng t√¨m th·∫•y egg g·∫ßn tile!")
					task.wait(5)
					continue
				end

				print("ü•ö D√πng egg:", bestEgg.Name)

				-- 3Ô∏è‚É£ C·∫≠p nh·∫≠t tile m·ªói 10 ph√∫t
				task.spawn(function()
					while true do
						task.wait(600)
						print("üîÅ [10 ph√∫t] Ki·ªÉm tra tile m·ªõi...")
						local newTile, newChance = findBestHugeTile()
						if newTile and newTile.PrimaryPart and newChance > currentChance then
							currentChance = newChance
							print("üîÅ Tile m·ªõi t·ªët h∆°n:", newTile.Name, "|", newChance .. "x")

							teleportToTile(newTile)
							task.wait(1)
							bestTile = newTile
							bestEgg = findEggNearTile(newTile)

							if bestEgg then
								print("‚úÖ Egg m·ªõi:", bestEgg.Name)
							else
								warn("‚ùå Kh√¥ng t√¨m th·∫•y egg m·ªõi!")
							end
						else
							print("‚è∏ V·∫´n gi·ªØ tile:", bestTile.Name, "|", currentChance .. "x")
						end
					end
				end)

				-- 4Ô∏è‚É£ Hatch li√™n t·ª•c
				while getTotalTileCount() >= tileThreshold do
					if bestEgg and bestEgg:IsA("Model") then
						local args = {bestEgg.Name, MaxEggHatch}
						local success, err = pcall(function()
							Network.CustomEggs_Hatch:InvokeServer(unpack(args))
						end)
						if not success then
							warn("‚ùå Hatch l·ªói:", err)
						end
					else
						warn("‚ùå Egg kh√¥ng h·ª£p l·ªá!")
					end
					task.wait(0)
				end
			else
				print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y tile Huge h·ª£p l·ªá.")
			end
		else
			print("‚è≥ Ch·ªù ƒë·ªß tile (" .. getTotalTileCount() .. "/" .. tileThreshold .. ")...")
		end

		task.wait(5)
	end
end

---------------- üß© LU·ªíNG 6: Auto SummerGiftBag2025 ----------------
local function startAutoGiftBag()
	local Network = ReplicatedStorage:WaitForChild("Network")
	while true do
		if getTotalTileCount() >= 50 then
			local args = { [1] = 10 }
			pcall(function()
				Network.SummerGiftBag2025Machine_Activate:InvokeServer(unpack(args))
			end)
		end
		task.wait(1)
	end
end

---------------- üß© LU·ªíNG 7: Auto Rebirth ----------------
local function startAutoRebirth()
	local Save = require(ReplicatedStorage.Library.Client.Save)
	local PlotsInvoke = ReplicatedStorage:WaitForChild("Network"):WaitForChild("Plots_Invoke")
	local threshold = 169
	local maxTileRebirth = 10

	while true do
		task.wait(20)
		local saveData = Save.Get()
		local tileRebirth = saveData.TileRebirth or 0

		if tileRebirth >= maxTileRebirth then
			warn("üõë ƒê√£ ƒë·∫°t TileRebirth =", tileRebirth, "- D·ª´ng Auto Rebirth.")
			break
		end

		if getTotalTileCount() >= threshold then
			local args = {1, "Rebirth"}
			pcall(function()
				PlotsInvoke:InvokeServer(unpack(args))
				print("üîÅ ƒê√£ g·ª≠i y√™u c·∫ßu Rebirth | TileRebirth hi·ªán t·∫°i:", tileRebirth)
			end)
		end

		task.wait(20)
	end
end

---------------- üß© LU·ªíNG 8: GUI Coins / Tiles / Chance ----------------
local function startGuiUpdater()
	local player = Players.LocalPlayer
	local playerGui = player:WaitForChild("PlayerGui")
	local SaveModule = require(ReplicatedStorage.Library.Client.Save)

	local function getCurrencyAmount(currencyId)
		local Inventory = SaveModule.Get().Inventory
		for _, v in pairs(Inventory.Currency) do 
			if v.id == currencyId then
				return v._am
			end
		end
		return 0
	end

	local screenGui = playerGui:FindFirstChild("BlockPartyGui")
	if not screenGui then
		screenGui = Instance.new("ScreenGui")
		screenGui.Name = "BlockPartyGui"
		screenGui.ResetOnSpawn = false
		screenGui.Parent = playerGui
	end

	local function createLabel(name, position, anchor, bgColor)
		local label = Instance.new("TextLabel")
		label.Name = name
		label.AnchorPoint = anchor
		label.Position = position
		label.Size = UDim2.new(0, 0, 0, 38)
		label.BackgroundColor3 = bgColor
		label.TextColor3 = Color3.new(1, 1, 1)
		label.Font = Enum.Font.GothamBold
		label.TextSize = 32
		label.BackgroundTransparency = 0
		label.BorderSizePixel = 0
		label.TextXAlignment = Enum.TextXAlignment.Center
		label.Text = "..."
		label.Parent = screenGui
		return label
	end

	local function updateLabelSize(label)
		label.Size = UDim2.new(0, label.TextBounds.X + 20, 0, 38)
	end

	local tilesLabel  = createLabel("TilesLabel",  UDim2.new(0, -10, 0.2, -10), Vector2.new(0, 0), Color3.fromRGB(0, 128, 0))
	local coinsLabel  = createLabel("CoinsLabel",  UDim2.new(0.5, -15, 0.2, -10), Vector2.new(0.5, 0), Color3.fromRGB(255, 165, 0))
	local chanceLabel = createLabel("ChanceLabel", UDim2.new(1, -30, 0.2, -10), Vector2.new(1, 0), Color3.fromRGB(0, 102, 204))

	while true do
		tilesLabel.Text  = "T: " .. tostring(getTotalTileCount())
		updateLabelSize(tilesLabel)

		coinsLabel.Text  = "C: " .. tostring(getCurrencyAmount("BlockPartyCoins"))
		updateLabelSize(coinsLabel)

		chanceLabel.Text = tostring(currentChance) .. "x HUGE"
		updateLabelSize(chanceLabel)

		task.wait(1)
	end
end

---------------- üß© LU·ªíNG 9: Teleport m·ªôt l·∫ßn khi ƒë·ªß 83 tile ----------------
local function startPreEggTeleport()
	local player = Players.LocalPlayer

	-- Ch·ªù ƒë·∫øn khi ƒë·ªß 83 tile
	while getTotalTileCount() < 83 do
		task.wait(10)
	end

	-- üß≠ Di chuy·ªÉn t·ªõi v·ªã tr√≠ tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu x·ª≠ l√Ω egg
	local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
	if hrp then
		hrp.CFrame = CFrame.new(16543, 2275, -21618)
		task.wait(5)
	end
end

local function check_joinevent_()
	
	m=0
	while true do
		task.wait(1)
		if getTotalTileCount() == 0 then
			m=m+1
		end
		if getTotalTileCount() ~= 0 then
			m=0
		end
		if m > 30 then
			Players.LocalPlayer:Kick("1 min T = 0")			
		end
		task.wait(1)
	end

end

local function check_Egghatch()


while true do
wait(30)
	if getTotalTileCount() == 169 then
		break
	end
end

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Client = ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client")
local SaveData = require(Client.Save).Get

local lastEggsHatched = nil

while true do
	local data = SaveData()
	if data and data.EggsHatched then
		local current = data.EggsHatched

		if current == lastEggsHatched and getTotalTileCount() == 169 then
			Players.LocalPlayer:Kick("EggsHatched = 0")
			break
		else
			lastEggsHatched = current
			warn(lastEggsHatched)
		end
	end

	task.wait(30)
end

end


task.spawn(check_joinevent_)
task.spawn(check_Egghatch)
---------------- üöÄ K√≠ch ho·∫°t t·∫•t c·∫£ lu·ªìng song song ----------------
task.spawn(startAutoPurchase)
task.spawn(startTileHandler)
task.spawn(startAutoHatchHuge)
task.spawn(startAutoGiftBag)
task.spawn(startAutoRebirth)
task.spawn(startGuiUpdater)
task.spawn(startPreEggTeleport)
