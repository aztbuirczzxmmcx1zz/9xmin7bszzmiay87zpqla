wait(50)
PAUSE_or_SEND = "s"

wait(1)
-- view g√≥c tr√°i
task.spawn(function()

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local Client = ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client")
local SaveModule = require(Client:WaitForChild("Save"))

local previousCounts = {}

-- c·∫•u h√¨nh item c·∫ßn theo d√µi
local itemsToTrack = {
	
	{ id = "Huge", guiName = "Item3", row = 1, col = 0, color = Color3.fromRGB(0, 255, 255) },			--xanh	tr√°i
	{ id = "Titanic", guiName = "Item4", row = 1, col = 1, color = Color3.fromRGB(192,192,192) }, 		--x√°m
	{ id = "Summer Block Party Ticket", guiName = "Item1", row = 0, col = 0, color = Color3.fromRGB(255, 165, 0) },		-- cam
	{ id = "MVP Key", guiName = "Item2", row = 0, col = 1, color = Color3.fromRGB(255, 255, 255) },				--trang
	{ id = "MVP Key Upper Half", guiName = "Item5", row = 0, col = 2, color = Color3.fromRGB(255, 255, 255) },				--trang


}

local function createItemFrame(itemConfig, itemCount)
	local frameSize = 100
	local spacing = 10
	local cols = 2
	local rows = 2

	local offsetX = (itemConfig.col * (frameSize + spacing)) - ((cols - 1) * (frameSize + spacing) / 2)
	local offsetY = (itemConfig.row * (frameSize + spacing)) - ((rows - 1) * (frameSize + spacing) / 2) + 80


	local screenGui = Instance.new("ScreenGui")
	screenGui.Name = itemConfig.guiName
	screenGui.Parent = PlayerGui
	screenGui.ResetOnSpawn = false
	screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

	local frame = Instance.new("Frame")
	frame.Name = "ItemFrame"
	frame.Size = UDim2.new(0, frameSize, 0, frameSize)
	frame.Position = UDim2.new(0.2, offsetX, 1, -offsetY)
	frame.AnchorPoint = Vector2.new(0.5, 1)
	frame.BackgroundColor3 = itemConfig.color
	frame.BorderSizePixel = 2
	frame.Parent = screenGui

	local label = Instance.new("TextLabel")
	label.Size = UDim2.new(1, 0, 1, 0)
	label.BackgroundTransparency = 1
	label.Text = tostring(itemCount)
	label.TextColor3 = Color3.fromRGB(0, 0, 0)
	label.TextScaled = true
	label.Font = Enum.Font.GothamBold
	label.Parent = frame
end

local function checkInventory()
	local inventory = SaveModule.Get().Inventory or {}
	local currentCounts = {}

	-- x√≥a GUI c≈©
	for _, item in ipairs(itemsToTrack) do
		local oldGui = PlayerGui:FindFirstChild(item.guiName)
		if oldGui then oldGui:Destroy() end
	end

	for _, item in ipairs(itemsToTrack) do
		local count = 0
		if item.id == "Huge" then
			local pets = inventory.Pet
			for _, pet in pairs(pets) do
				if string.find(pet.id, "Huge") then
					local amount = pet._am or 1
					count = count + amount
				end
			end
		elseif item.id == "Titanic" then
			local pets = inventory.Pet
			for _, pet in pairs(pets) do
				if string.find(pet.id, "Titanic") then
					local amount = pet._am or 1
					count = count + amount
				end
			end	
		else
			for _, group in pairs(inventory) do
				for _, obj in pairs(group) do
					if obj.id == item.id then
						count += (obj._am or 1)
					end
				end
			end			
		end
		
		
		
		currentCounts[item.id] = count
		createItemFrame(item, count)
	end

	previousCounts = currentCounts
end

checkInventory()
while true do
	task.wait(10)
	checkInventory()
end
end)

wait(1)
--Sent ch√¨a
task.spawn(function()

if PAUSE_or_SEND == "p" then
	return
end

NAME_USER_SEND = "veriotiai779"


function Sent_item_all()

getgenv().Settings_sentitem = {		

["Summer Block Party Ticket"] = {Class = "Misc", Id = "Summer Block Party Ticket",MinAmount = 8000, keepAmount = 7000},	--ok
["MVP Key Upper Half"] = {Class = "Misc", Id = "MVP Key Upper Half", MinAmount = 1000},	--ok
["MVP Key Lower Half"] = {Class = "Misc", Id = "MVP Key Lower Half", MinAmount = 10000},	
--["Tech Key"] = {Class = "Misc", Id = "Tech Key", MinAmount = 1000},	
--["Coins"] = {Class = "Enchant", Id = "Coins", TN = 7, MinAmount = 1000}, 
--["Diamond"] = {Class = "Seed", Id = "Diamond", MinAmount = 2000},
--["Insta Plant Capsule"] = {Class = "Misc", Id = "Insta Plant Capsule", MinAmount = 500},

}

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Client = ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client")
local Network = require(Client.Network)
local SaveData = require(ReplicatedStorage.Library.Client.Save).Get()
local Players = game:GetService("Players")

local player = Players.LocalPlayer
local Inventory = SaveData.Inventory

local itemsFound = {} -- K·∫øt qu·∫£ t√¨m ƒë∆∞·ª£c

-- üí¨ Danh s√°ch l·ªùi ch√∫c
local messages = {
    "Happy Birthday %s!",
    "Hope today brings %s!",
    "Wishing you luck %s!",
    "Congrats on your %s!",
    "Give away %s!",
    "You are amazing %s"
}

local message = string.format(messages[math.random(1, #messages)], NAME_USER_SEND)	

-- üî¢ H√†m chuy·ªÉn ƒë∆°n v·ªã "100m", "1b" th√†nh s·ªë
local function parseNumber(str)
	if type(str) == "number" then return str end
	str = str:lower()
	local multipliers = {k = 1e3, m = 1e6, b = 1e9, t = 1e12}
	local num = tonumber(str:match("[%d%.]+")) or 0
	local suffix = str:match("[a-z]+")
	return num * (multipliers[suffix] or 1)
end

-- üîç T√¨m item trong Inventory
local function findMatchingItems(class, id, allVariants, requiredTN)
	local results = {}
	local sub = Inventory[class]
	if not sub then return results end

	for uid, v in pairs(sub) do
		if type(v) == "table" and v.id then
			local match = false
			if allVariants then
				match = string.find(v.id, id)
			else
				match = v.id == id
			end

			-- üîç Ki·ªÉm tra th√™m TN n·∫øu c√≥
			if match then
				if requiredTN == nil or v.tn == requiredTN then
					table.insert(results, {
						UID = uid,
						ID = v.id,
						PT = v.pt,
						SH = v.sh,
						TN = v.tn,
						Count = tonumber(v._am) or 1,
						Class = class,
					})
				end
			end
		end
	end

	return results
end


-- üì¶ Duy·ªát qua t·ª´ng m·ª•c c·∫•u h√¨nh
for key, config in pairs(getgenv().Settings_sentitem) do
	local class = config.Class
	local id = config.Id
	local minAmount = parseNumber(config.MinAmount)
	local keepAmount = config.KeepAmount and parseNumber(config.KeepAmount) or 0
	local allVariants = config.AllVariants or false
	wait(2)
	if class == "Currency" then

	for uid, v in pairs(Inventory.Currency) do
		if v.id == id then
			local current = tonumber(v._am) or 0
			local sendAmount = current - keepAmount
			
			if sendAmount >= minAmount then
				print("üí∞ G·ª≠i currency:", id, "‚Üí", sendAmount)
				local success, err = pcall(function()
					return Network.Invoke("Mailbox: Send", NAME_USER_SEND, message, "Currency", uid, sendAmount)
				end)
				if not success then
					warn("‚ùå G·ª≠i currency l·ªói:", err)
				end
				task.wait(2)
			end
		end
	end

	else
    local matched = findMatchingItems(class, id, allVariants, config.TN)

		for _, item in ipairs(matched) do
			local count = item.Count
			local sendCount = count

			if keepAmount > 0 and count > keepAmount then
				sendCount = count - keepAmount
			end

			if sendCount >= minAmount then
	
				print("üì¶ G·ª≠i item:", item.ID, "| SL:", sendCount, "| Lo·∫°i:", item.Class)
				local success, err = pcall(function()
					return Network.Invoke("Mailbox: Send", NAME_USER_SEND, message, class, item.UID, sendCount)
				end)
				if not success then
					warn("‚ùå G·ª≠i item l·ªói:", err)
				end
				task.wait(2)
			end
		end
	end
end

end

Sent_item_all()

end)

wait(1)
-- send pet hiem hoac huge gia cao. Soluong_Yeu_cau = 1 th√¨ gi·ªØ l·∫°i 1 con, kh√°c 1 th√¨ ph·∫£i ch·ªù nhi·ªÅu h∆°n Soluong_Yeu_cau th√¨ m·ªõi send t·∫•t c·∫£
task.spawn(function() 
if PAUSE_or_SEND == "p" then
	return
end

getgenv().Settings_sentPET = {
    ["list_pet"] = {

["Palace Pooka"] 	= {Soluong_Yeu_cau = 0},
["Golden Palace Pooka"] 	= {Soluong_Yeu_cau = 0},

["Rose Pooka"] 	= {Soluong_Yeu_cau = 0},
["Golden Rose Pooka"] 	= {Soluong_Yeu_cau = 0},

},
   
}


ds_nguoi_nhan_pet = {"veriotiai779"}


-- H√†m ki·ªÉm tra t√™n c√≥ ch·ª©a t·ª´ kh√≥a
function Kiem_tra_ten_co_them_tu_la_(itemName)
    local SH_find = false
    local PT_find = false
    local TN_find = false    
    local category_find = false
	
    -- Ki·ªÉm tra n·∫øu itemName c√≥ t·ª´ "Shiny"
    if string.find(itemName, "Shiny") then
        SH_find = true
        itemName = string.gsub(itemName, "Shiny ", "") -- Lo·∫°i b·ªè t·ª´ "Shiny"
        warn("SH_find true")
    end

    -- Ki·ªÉm tra n·∫øu itemName c√≥ t·ª´ "Golden"
    if string.find(itemName, "Golden") then
        PT_find = 1
        itemName = string.gsub(itemName, "Golden ", "") -- Lo·∫°i b·ªè t·ª´ "Golden"
        warn("PT_find 1")
    end

    -- Ki·ªÉm tra n·∫øu itemName c√≥ t·ª´ "Rainbow"
    if string.find(itemName, "Rainbow") then
        PT_find = 2
        itemName = string.gsub(itemName, "Rainbow ", "") -- Lo·∫°i b·ªè t·ª´ "Rainbow"
        warn("PT_find 2")
    end

    -- Ki·ªÉm tra n·∫øu itemName c√≥ t·ª´ "Shiny Golden"
    if string.find(itemName, "Shiny Golden") then
        SH_find = true
        PT_find = 1
        itemName = string.gsub(itemName, "Shiny Golden ", "") -- Lo·∫°i b·ªè t·ª´ "Shiny Golden"
        warn("PT_find 1 SH_find true")
    end

    -- Ki·ªÉm tra n·∫øu itemName c√≥ t·ª´ "Shiny Rainbow"
    if string.find(itemName, "Shiny Rainbow") then
        SH_find = true
        PT_find = 2
        itemName = string.gsub(itemName, "Shiny Rainbow ", "") -- Lo·∫°i b·ªè t·ª´ "Shiny Rainbow"
        warn("PT_find 2 SH_find true")
    end

    -- Ki·ªÉm tra n·∫øu itemName c√≥ t·ª´ "TNx"
    local tnMatch = itemName:match("TN(%d)")  -- T√¨m ki·∫øm "TN" k√®m m·ªôt s·ªë
    if tnMatch then
        TN_find = tonumber(tnMatch)  -- G√°n gi√° tr·ªã c·ªßa TN_find
        itemName = string.gsub(itemName, " TN%d", "")  -- Lo·∫°i b·ªè ph·∫ßn "TNx" kh·ªèi itemName
    end

    -- Ki·ªÉm tra category
    if string.find(itemName, "Potion") then
        category_find = "Potion"
        itemName = string.gsub(itemName, "Potion ", "") -- Lo·∫°i b·ªè t·ª´ "Potion"
        warn("category Potion")
    end
    if string.find(itemName, "Enchant") then
        category_find = "Enchant"
        itemName = string.gsub(itemName, "Enchant ", "") -- Lo·∫°i b·ªè t·ª´ "Enchant"
        warn("category Enchant")
    end
	if string.find(itemName, "XPPotion") then
        category_find = "XPPotion"
        itemName = string.gsub(itemName, "XPPotion ", "") -- Lo·∫°i b·ªè t·ª´ "XPPotion"
        warn("category XPPotion")
    end

    -- Tr·∫£ v·ªÅ t·∫•t c·∫£ c√°c gi√° tr·ªã
    return itemName, SH_find, PT_find
end

-- H√†m t√¨m trong t·ª´ng b·∫£ng con c·ªßa Inventory
local function findInInventorySubTable(subTable, itemName, PT_find, SH_find)
    if type(subTable) ~= "table" then return end

    -- S·ª≠ d·ª•ng string.match ƒë·ªÉ t√¨m ch√≠nh x√°c itemName
    for uid, v in pairs(subTable) do
        if type(v) == "table" and v.id then
            -- Ki·ªÉm tra xem id c√≥ kh·ªõp ch√≠nh x√°c v·ªõi itemName v√† PT_find, SH_find, TN_find
            if string.match(v.id, "^" .. itemName .. "$") then  -- D√πng string.match ƒë·ªÉ t√¨m ph·∫ßn chu·ªói ch√≠nh x√°c
                local ok = true

                -- Ki·ªÉm tra ƒëi·ªÅu ki·ªán PT_find n·∫øu c√≥
                if PT_find ~= false and v.pt ~= PT_find then
                    ok = false
                end
                if PT_find == false and v.pt == 1 then
                    ok = false
                end
                if PT_find == false and v.pt == 2 then
                    ok = false
                end
                -- Ki·ªÉm tra ƒëi·ªÅu ki·ªán SH_find n·∫øu c√≥
                if SH_find == true and v.sh == nil then
                    ok = false 
                end
                if SH_find == false and v.sh == true then
                    -- N·∫øu SH_find l√† nil th√¨ ch·ªâ ch·∫•p nh·∫≠n v.sh l√† nil
                    ok = false
                end

                -- N·∫øu t·∫•t c·∫£ ƒëi·ªÅu ki·ªán ƒë·ªÅu th·ªèa m√£n, th√™m v√†o danh s√°ch
                if ok then
                    table.insert(itemsFound, {
                        UID = uid,
                        ID = v.id,
                        PT = v.pt,
                        SH = v.sh,
                        TN = v.tn,
                        Count = tonumber(v._am) or 1,
                        Category = categoryName  -- Th√™m category cho t·ª´ng m·ª•c
                    })
                end
            end
        end
    end
end

-- H√†m ki·ªÉm tra v√† g·ª≠i pet
local function sendExcessPets()

	local ReplicatedStorage = game:GetService("ReplicatedStorage")
	local Client = ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client")
	local Network = require(Client.Network)
	local SaveData = require(ReplicatedStorage.Library.Client.Save).Get()   

    -- L·∫∑p qua t·ª´ng pet trong list_pet
    for petName, petData in pairs(getgenv().Settings_sentPET["list_pet"]) do
        local itemName = petName
        local requiredAmount = petData.Soluong_Yeu_cau
        local itemName,SH_find, PT_find = Kiem_tra_ten_co_them_tu_la_(itemName)
        
        -- Reset l·∫°i danh s√°ch pet
        itemsFound = {}

        -- T√¨m trong Inventory
        findInInventorySubTable(SaveData.Inventory.Pet, itemName, PT_find, SH_find)
        
        -- Ki·ªÉm tra s·ªë l∆∞·ª£ng pet c√≥ s·∫µn trong kho
        local totalCount = 0
        for _, item in pairs(itemsFound) do
            if item.ID == itemName then
                totalCount = totalCount + item.Count
            end
        end

        -- N·∫øu s·ªë l∆∞·ª£ng pet c√≥ trong kho nhi·ªÅu h∆°n y√™u c·∫ßu, g·ª≠i pet 
        if totalCount > requiredAmount then
            
            local randomRecipient = ds_nguoi_nhan_pet[math.random(1, #ds_nguoi_nhan_pet)]
            local message = string.format("Happy birthday %s! You received an excess pet: %s", randomRecipient, itemName)

            -- L·∫∑p qua v√† g·ª≠i pet
            local petSent = 0
            for _, item in pairs(itemsFound) do
				
                if item.ID == itemName and petSent < totalCount then
                    
                    -- G·ª≠i pet
					wait(3)
					if string.find(itemName,"Huge") then
						--warn("Huge chi send 1")
						totalCount = 1
					end
					if requiredAmount == 1 then
						--warn("Gi·ªØ l·∫°i bn con")
						totalCount = totalCount - requiredAmount
					end
                    local success, err = pcall(function()

                        return Network.Invoke("Mailbox: Send", randomRecipient, message, "Pet", item.UID, totalCount)
                    end)
                    if success then
                        warn("‚úÖ ƒê√£ g·ª≠i pet " .. itemName .. " cho " .. randomRecipient .. " v·ªõi s·ªë l∆∞·ª£ng " .. totalCount)
                    else
                        warn("‚ùå L·ªói khi g·ª≠i pet " .. itemName .. ": " .. err)
                    end
                    
                end
            end
        else
            warn("‚ö†Ô∏è Kh√¥ng c√≥ ƒë·ªß pet " .. itemName .. " trong kho ƒë·ªÉ g·ª≠i.")
        end
    end
end

-- G·ªçi h√†m g·ª≠i pet




while true do

sendExcessPets()
wait(3600)
end


end)

wait(1)
-- gh√©p b√¨nh mastery t·ª´ coin7 + key tech
task.spawn(function()

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Client = ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client")
local SaveData = require(Client:WaitForChild("Save")).Get()

-- Remote Craft
local CraftMastery = ReplicatedStorage.Network["XPPotions: Craft"]

-- H√†m t√≠nh s·ªë l∆∞·ª£ng craft ƒë∆∞·ª£c
local function checkAndCraft()
    local Inventory = SaveData.Inventory or {}

    -- L·∫•y Diamonds
    local diamonds = 0
    for uid, v in pairs(Inventory.Currency or {}) do
        if v.id == "Diamonds" then
            diamonds = v._am or 0
            break
        end
    end

    -- L·∫•y Tech Key
    local keyTech = 0
    for uid, v in pairs(Inventory.Misc or {}) do
        if v.id == "Tech Key" then
            keyTech += (v._am or 1)
        end
    end

    -- L·∫•y Enchant Coins TN=7
    local coins7 = 0
    for uid, v in pairs(Inventory.Enchant or {}) do
        if v.id == "Coins" and v.tn == 7 then
            coins7 += (v._am or 1)
        end
    end

    print("üíé Diamonds:", diamonds)
    print("üîë Tech Key:", keyTech)
    print("üìö Coins TN=7:", coins7)

    -- T√≠nh s·ªë Mastery craft ƒë∆∞·ª£c
    local maxByDiamonds = math.floor(diamonds / 150000)
    local maxByCoins = math.floor(coins7 / 12)
    local maxByKeyTech = math.floor(keyTech / 3)

    local craftAmount = math.min(maxByDiamonds, maxByCoins, maxByKeyTech)

    if craftAmount > 0 then
        print("üöÄ B·∫Øt ƒë·∫ßu craft", craftAmount, "b√¨nh Mastery...")
        local success, result = pcall(function()
            return CraftMastery:InvokeServer("Mastery", craftAmount)
        end)

        if success then
            print("‚úÖ Craft th√†nh c√¥ng:", craftAmount, "Mastery")
        else
            warn("‚ùå Craft th·∫•t b·∫°i:", result)
        end
        return true
    else
        print("‚ö†Ô∏è Kh√¥ng ƒë·ªß t√†i nguy√™n ‚Üí ch·ªù 1 gi·ªù r·ªìi th·ª≠ l·∫°i...")
        return false
    end
end

-- V√≤ng l·∫∑p ki·ªÉm tra li√™n t·ª•c
while true do
    local crafted = checkAndCraft()
    task.wait(3600)
end


end)










