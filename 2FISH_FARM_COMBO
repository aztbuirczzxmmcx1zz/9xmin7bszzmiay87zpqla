

-- Services & data
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local player = Players.LocalPlayer
local PlayerGui = player:WaitForChild("PlayerGui")

local okSave, Save = pcall(function() return require(ReplicatedStorage.Library.Client.Save) end)
if not okSave then Save = nil end

local FARM_PLACEID = 119454325063278
local FISH_PLACEID = 95635359880599
local LOBBY_PLACEID_SPECIAL = 140403681187145 -- special lobby id
local WORLD4_REMOTE_NAME = "World4Teleport"
local REQUIRED_SECONDS = 1 * 10 -- 30 minutes

local runtime = {
    farm = { total = 0, last = os.time(), done = false },
    fish = { total = 0, last = os.time(), done = false },
    lastDay = os.date("%d/%m/%Y"),
    reset23Date = nil
}

local function getFileName() return "comboEventLog.json" end

local function loadData()
    if isfile(getFileName()) then
        local ok, data = pcall(function() return HttpService:JSONDecode(readfile(getFileName())) end)
        if ok and type(data) == "table" then
            runtime = data
            runtime.farm = runtime.farm or { total = 0, last = os.time(), done = false }
            runtime.fish = runtime.fish or { total = 0, last = os.time(), done = false }

            -- üëâ Check l·∫°i tr·∫°ng th√°i done n·∫øu b·ªã thi·∫øu
            local updated = false
			if not runtime.farm.done and runtime.farm.total >= REQUIRED_SECONDS then
				runtime.farm.done = true
				updated = true
			end
			if not runtime.fish.done and runtime.fish.total >= REQUIRED_SECONDS then
				runtime.fish.done = true
				updated = true
			end
			if updated then
				saveData()
			end

            runtime.lastDay = runtime.lastDay or os.date("%d/%m/%Y")
        end
    end
end



local function saveData()
    runtime.lastDay = os.date("%d/%m/%Y")
    task.spawn(function()
        local success, err = pcall(function()
            writefile(getFileName(), HttpService:JSONEncode(runtime))
        end)
        if not success then
            warn("‚ùå Ghi file th·∫•t b·∫°i:", err)
        end
    end)
end

task.spawn(function()
    while true do
        task.wait(60)
        saveData()
    end
end)

local function resetIfNewDay()
    local today = os.date("%d/%m/%Y")
    if runtime.lastDay ~= today then
        runtime = {
            farm = { total = 0, last = os.time(), done = false },
            fish = { total = 0, last = os.time(), done = false },
            lastDay = today,
            reset23Date = nil
        }
        saveData()
    end
end

local function getVNNow()
    local now = os.date("!*t", os.time(os.date("!*t")) + 7 * 3600)
    return now
end

local function checkResetAt23()
    local vn = getVNNow()
    if not vn then return end
    local vnDateStr = string.format("%02d/%02d/%04d", vn.day, vn.month, vn.year)
    if vn.hour == 23 then
        if runtime.reset23Date ~= vnDateStr then
            runtime.farm.total = 0
            runtime.farm.last = os.time()
            runtime.farm.done = false
            runtime.fish.total = 0
            runtime.fish.last = os.time()
            runtime.fish.done = false
            runtime.reset23Date = vnDateStr
            runtime.lastDay = vnDateStr
            saveData()
            warn(("üîÅ Reset progress at 23:00 VN (%s)"):format(vnDateStr))
        end
    else
        -- do nothing; reset23Date kept until new day or next 23:00
    end
end

local function updateProgress(which)
    local now = os.time()
    local data = runtime[which]
    if not data then 
		--warn("[updateProgress] Kh√¥ng t√¨m th·∫•y runtime." .. which) 
		return 
	end
    if type(data.last) ~= "number" then
        --warn("[updateProgress] last b·ªã l·ªói, g√°n l·∫°i")
        data.last = now
    end

    local delta = math.max(0, now - data.last)
    data.total = (data.total or 0) + delta
    data.last = now

    --warn(string.format("[updateProgress] %s: +%ds, total=%d", which, delta, data.total))

    if not data.done and data.total >= REQUIRED_SECONDS then
        data.done = true
        warn(string.format("[updateProgress] %s DONE ‚úÖ", which))
    end

    local success, err = pcall(function()
        writefile(getFileName(), HttpService:JSONEncode(runtime))
    end)
    if not success then
        --warn("[updateProgress] ‚ùå Ghi file th·∫•t b·∫°i:", err)
    else
        --warn("[updateProgress] ‚úÖ ƒê√£ l∆∞u v√†o file")
    end
end



-- GUI creation (right-bottom small progress)
local function createGUI()
    if PlayerGui:FindFirstChild("EventProgressUI") then PlayerGui.EventProgressUI:Destroy() end

    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "EventProgressUI"
    screenGui.Parent = PlayerGui

    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 250, 0, 68)
    frame.Position = UDim2.new(1, -260, 1, -100)
    frame.BackgroundColor3 = Color3.fromRGB(25,25,25)
    frame.BackgroundTransparency = 0.25
    frame.BorderSizePixel = 0
    frame.Parent = screenGui
    Instance.new("UICorner", frame).CornerRadius = UDim.new(0,12)

    local function createRow(parent, text, y, color)
        local lbl = Instance.new("TextLabel")
        lbl.Size = UDim2.new(1, -10, 0, 20)
        lbl.Position = UDim2.new(0,5,0,y)
        lbl.BackgroundTransparency = 1
        lbl.TextColor3 = Color3.fromRGB(230,230,230)
        lbl.TextXAlignment = Enum.TextXAlignment.Left
        lbl.Font = Enum.Font.SourceSansBold
        lbl.TextSize = 26
        lbl.Text = text .. ": 0%"
        lbl.Parent = parent

        local bg = Instance.new("Frame")
        bg.Size = UDim2.new(1, -10, 0, 12)
        bg.Position = UDim2.new(0,5,0,y + 22)
        bg.BackgroundColor3 = Color3.fromRGB(60,60,60)
        bg.BorderSizePixel = 0
        bg.Parent = parent
        Instance.new("UICorner", bg).CornerRadius = UDim.new(0,6)

        local bar = Instance.new("Frame")
        bar.Size = UDim2.new(0,0,1,0)
        bar.BackgroundColor3 = color
        bar.BorderSizePixel = 0
        bar.Parent = bg
        Instance.new("UICorner", bar).CornerRadius = UDim.new(0,6)

        return lbl, bar
    end

    local farmLbl, farmBar = createRow(frame, "Farm", 5, Color3.fromRGB(100,255,100))
    local fishLbl, fishBar = createRow(frame, "Fishing", 36, Color3.fromRGB(100,150,255))

    task.spawn(function()
        while screenGui.Parent do
            local farmPct = math.min(100, math.floor((runtime.farm.total or 0) / REQUIRED_SECONDS * 100))
            local fishPct = math.min(100, math.floor((runtime.fish.total or 0) / REQUIRED_SECONDS * 100))

            farmLbl.Text = string.format("Farm: %d%%", farmPct)
            farmBar.Size = UDim2.new(farmPct/100, 0, 1, 0)

            fishLbl.Text = string.format("Fishing: %d%%", fishPct)
            fishBar.Size = UDim2.new(fishPct/100, 0, 1, 0)

            task.wait(30)
        end
    end)
end


local function invokeWorld4()
        game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("World4Teleport"):InvokeServer()
    task.wait(20) -- ch·ªù 3 ph√∫t

    if game.PlaceId ~= PLACE_WORLD_4 then
        print("‚ö†Ô∏è Teleport World4 l·∫ßn 1 th·∫•t b·∫°i, th·ª≠ l·∫°i...")
        game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("World4Teleport"):InvokeServer()
        task.wait(20)

        if game.PlaceId ~= PLACE_WORLD_4 then
            LocalPlayer:Kick("‚ö†Ô∏è Tele World4 th·∫•t b·∫°i!")
        else
            print("‚úÖ Teleport World4 l·∫ßn 2 th√†nh c√¥ng.")
        end
    else
        print("‚úÖ Teleport World4 l·∫ßn 1 th√†nh c√¥ng.")
    end
end

local function serverhopTo(placeId)
	TeleportService:Teleport(placeId, LocalPlayer)
end

local function serverhopToFishing()
	if game.PlaceId ~= 95635359880599 then
		serverhopTo(95635359880599)
	end
end
local function serverhopToFarm()
	if game.PlaceId ~= 119454325063278 then
		serverhopTo(119454325063278)
	end
end
local function teleportToFishingInServer()
	if game.PlaceId ~= 95635359880599 then
		serverhopTo(95635359880599)
	end
end
local function teleportToFarmInServer()
	if game.PlaceId ~= 119454325063278 then
		serverhopTo(119454325063278)
	end
end


local function trackFarm()
    task.spawn(function()
        while not runtime.farm.done do
            updateProgress("farm")
            task.wait(10)
        end
        if not runtime.fish.done then
            pcall(serverhopToFishing)
        end
		if runtime.farm.done and runtime.fish.done then
			game:Shutdown()
			LocalPlayer:Kick("kick_compo_track_farm")
		end
    end)
end

local function trackFishing()
    task.spawn(function()
        while not runtime.fish.done do
            updateProgress("fish")
            task.wait(10)
        end
        if not runtime.farm.done then
            pcall(serverhopToFarm)
        end
    end)
end

local function waitForNewDay()
    local initial = os.date("%d/%m/%Y")
    while true do
        task.wait(60)
        if os.date("%d/%m/%Y") ~= initial then
            resetIfNewDay()
            break
        end
    end
end

task.spawn(function()
    while true do
        pcall(function() checkResetAt23() end)
        task.wait(60)
    end
end)

local function main()
	warn("PLAY")
    loadData()
    resetIfNewDay()

    task.spawn(function()
        task.wait(3)
        pcall(createGUI)
    end)
    
    if runtime.farm.done and runtime.fish.done then
        invokeWorld4()
        return
    end

    if game.PlaceId == FARM_PLACEID then
        runtime.farm.last = os.time()
        saveData()
        if (not runtime.farm.done) and (not runtime.fish.done) then
            local okHop = pcall(serverhopToFishing)
            if not okHop then teleportToFishingInServer() end
            return
        end
        if (not runtime.farm.done) and runtime.fish.done then
            trackFarm()
            return
        end
        if runtime.farm.done and (not runtime.fish.done) then
            local okHop = pcall(serverhopToFishing)
            if not okHop then teleportToFishingInServer() end
            return
        end
    end

    if game.PlaceId == FISH_PLACEID then
        runtime.fish.last = os.time()
        saveData()
        if not runtime.fish.done then
            trackFishing()
            return
        end
        if not runtime.farm.done then
            local okHop = pcall(serverhopToFarm)
            if not okHop then teleportToFarmInServer() end
            return
        end
    end

    if (not runtime.fish.done) and (not runtime.farm.done) then
        local okHop = pcall(serverhopToFishing)
        if not okHop then teleportToFishingInServer() end
        return
    end

    if runtime.fish.done and (not runtime.farm.done) then
        local okHop = pcall(serverhopToFarm)
        if not okHop then teleportToFarmInServer() end
        return
    end

    if runtime.farm.done and (not runtime.fish.done) then
        local okHop = pcall(serverhopToFishing)
        if not okHop then teleportToFishingInServer() end
        return
    end
end

pcall(main)
